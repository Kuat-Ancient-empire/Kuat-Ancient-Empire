#
# These defines the type of bypasses that exist in game. This is only the logical connection between system
# These can be added to megastructures
#
# bypass_type = {
# 	name = GATEWAY_GALACTIC 		# the localization key used in triggers and effects for the type
# 	is_pathfind = yes 				# whether this type can be automatically used by the pathfinding (otherwise you'll have to right click the object containing it)
# 	requires_exploration = no		# whether this bypass type needs to be 'seen' before it can be used
# 	uses_action = no 				# whether this type needs an action or can be used automagically
# 	always_active = no 				# whether bypasses of these types are automatically active on creation, or if they need to be researched/upgraded to be activated
# 	windup_time = 0 				# time spent "prepping" in the system before going through the bypass
# 	winddown_time = 0 				# time spent "recovering" in the system after going through the bypass
# 	ftl_multiplier = 0				# 0 means instant
#	extends_sensors = yes			# whether you can "see through" the bypass and extends your sensor range to the other side
# 	icon_frame = 25
# 	remember_instances = no 	# whether countries remember meeting a specific instance of that type, or if they just remember seeing the type in general
# 	galactic_map_tooltip_header=GATEWAY_GALACTIC
# 	galactic_map_tooltip_desc=GATEWAY_GALACTIC_DESC
# 	connection_type = any_other
#	ftl_ship_effect 	= "gateway_ftl_ship_effect_entity"		# what effect to spawn on the ship when they jump through the bypass
#	ftl_bypass_effect	= "gateway_ftl_bypass_effect_entity"	# what effect to spawn on the bypass when a ship jumps through
#	bypass_effect 		= ""
#	animation_time = 3				# number of days to wait for the jump animation to be played
# 	prerequisites = {
# 		tech_gateway_activation
# 	}
# 	on_pre_explore = {					# an effect that is called just before the jump of a right click "explore" action of a fleet
#			
# 	}
#	country_can_use = {					# trigger to evaluate if a country can use bypasses of this type. this: country, from: (optional) system owner; default: { always = yes }
#	}
# 	on_action = "on_entering_bypass"	# The name of the on-action event that will be fired upon entering FTL (if set)
# 										# THIS = Fleet
# 										# FROM = System jumping to
# 										# FROMFROM = System jumped from
# }
exe_outer_gate = {
	name = "OUTERK_GATE"
	is_pathfind = yes
	uses_action = no
	always_active = no
	extends_sensors = no
	windup_time = 10
	winddown_time = 5
	ftl_multiplier = 5
	icon_frame = 30
	remember_instances = no	# whether countries remember meeting a specific instance of that type, or if they just remember seeing the type in general
	galactic_map_tooltip_header = LGATE_KUAT_GALACTIC
	galactic_map_tooltip_desc = LGATE_KUAT_GALACTIC_DESC
	connection_type = scripted_connection
	animation_time = 1
	ftl_ship_effect = "gateway_ftl_ship_effect_entity"
	ftl_bypass_effect = "gateway_ftl_bypass_effect_entity"
	country_can_use = {
		custom_tooltip = {
			fail_text = "Need_the_allow"
			kuat_is_can_pass_by_country = yes
		}
	}
	scripted_connection = {
		# defines endpoints that can only reach the "nexus"
		node = {
			# system scope
			kuat_is_kuat_system = no
		}
		# defines endpoint(s) that can reach all "nodes" (but not other nexuses)
		nexus = {
			# system scope
			kuat_is_kuat_system = yes
		}
	}
	on_action = "on_entering_gateway"
}

exe_inner_gate = {
	name = "OUTERK_GATE"
	is_pathfind = yes
	uses_action = no
	always_active = yes
	extends_sensors = no
	windup_time = 1
	winddown_time = 0
	ftl_multiplier = 0	# 0 means instant
	icon_frame = 30
	remember_instances = no	# whether countries remember meeting a specific instance of that type, or if they just remember seeing the type in general
	galactic_map_tooltip_header = LGATE_KUAT_GALACTIC
	galactic_map_tooltip_desc = LGATE_KUAT_GALACTIC_DESC
	connection_type = scripted_connection
	animation_time = 1
	ftl_ship_effect = "gateway_ftl_ship_effect_entity"
	ftl_bypass_effect = "gateway_ftl_bypass_effect_entity"
	country_can_use = {
		custom_tooltip = {
			fail_text = "Need_the_allow"
			kuat_is_can_inpass_by_country = yes
		}
	}
	scripted_connection = {
		# defines endpoints that can only reach the "nexus"
		node = {
			kuat_is_kuat_system = yes
		}
		# defines endpoint(s) that can reach all "nodes" (but not other nexuses)
		nexus = {
			kuat_is_kuat_system = yes
		}
	}
	on_action = "on_entering_gateway"
}

exe_center_rim_gate = {
	name = "OUTERK_GATE"
	is_pathfind = yes
	uses_action = no
	always_active = yes
	extends_sensors = no
	windup_time = 10
	winddown_time = 5
	ftl_multiplier = 5
	icon_frame = 25
	remember_instances = no	# whether countries remember meeting a specific instance of that type, or if they just remember seeing the type in general
	galactic_map_tooltip_header = LGATE_KUAT_GALACTIC
	galactic_map_tooltip_desc = LGATE_KUAT_GALACTIC_DESC
	connection_type = any_other
	animation_time = 1
	ftl_ship_effect = "gateway_ftl_ship_effect_entity"
	ftl_bypass_effect = "gateway_ftl_bypass_effect_entity"
	country_can_use = { custom_tooltip = {
		fail_text = "Need_the_allow"
		has_global_flag = kuat_war_goal
	} }
	on_action = "on_entering_gateway"
}

ag_kae_ge_invasion_portal = {
	name = ag_kae_ge_invasion_portal
	is_pathfind = yes
	uses_action = no
	always_active = yes
	windup_time = 10
	winddown_time = 5
	ftl_multiplier = 5
	extends_sensors = yes
	icon_frame = 42
	remember_instances = no
	galactic_map_tooltip_header = ag_kae_ge_invasion_portal
	galactic_map_tooltip_desc = ag_kae_ge_invasion_portal_desc
	connection_type = scripted_connection
	animation_time = 1
	ftl_ship_effect = "wormhole_ftl_ship_effect_entity"
	ftl_bypass_effect = "wormhole_ftl_bypass_effect_entity"

	country_can_use = { custom_tooltip = {
		fail_text = ag_kae_ge_invasion_portal_cannot_use
		OR = {
			has_global_flag = ag_kae_ge_invasion_ended
			is_country_type = ag_kae_ge_invasion_country
			AND = {
				exists = event_target:global_event_country
				event_target:global_event_country = { check_variable = { which = ag_kae_ge_invasion_num_portals_destroyed value >= 6 } }
			}
		}
	} }
	
	scripted_connection = {
		node = { NOT = { has_star_flag = ag_kae_e_area_system } }
		nexus = { has_star_flag = ag_kae_e_area_system }
	}

	on_action = "ag_kae_on_entering_ge_invasion_portal"
}