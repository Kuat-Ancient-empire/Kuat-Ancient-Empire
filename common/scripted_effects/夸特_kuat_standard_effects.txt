#Etenal fleet invasion AI
kuat_exe_spawn_outer_gate_fallback = {
	optimize_memory
	event_target:exe_invasion_outer_gate_spawn_system = {
		spawn_system = {
			initializer = "exe_invasion_fallback_init"
			min_distance >= 30
			max_distance <= 15
		}
	}
	random_system = {
		limit = { has_star_flag = ag_exe_invasion_gate_system_fallback }
		every_system = {
			limit = {
				NOR = {
					has_star_flag = Kuat_system
					has_star_flag = Kuat_system_1
					has_star_flag = Kuat_system_2
					has_star_flag = Kuat_system_3
					is_same_value = prev
					has_hyperlane_to = prev
				}
				distance = {
					source = prev
					min_distance >= 0
					max_distance <= 30
					type = euclidean
					use_bypasses = no
				}
			}
			random_list = {
				40 = { }
				60 = { add_hyperlane = { from = this to = prev } }
			}
		}
	}
}

#CREATE FLEET SCRIPT
create_exe_invasion_fleet = {
	optimize_memory
	create_fleet = {
		[[NAME] name = $NAME$ ]
		settings = { 
			[[is_composition] can_change_composition = $is_composition$ ]
			[[uses_naval_capacity] uses_naval_capacity = $uses_naval_capacity$ ]
			spawn_debris = no can_disband = $can_disband$ is_ultra_boss = $is_boss$
		}
		effect = {
			set_fleet_flag = kuat_fleet_hull_control
			[[flag] set_fleet_flag = $flag$ ]
			[[Fleet_owner] set_owner = $Fleet_owner$ ]
			[[bombardment] set_fleet_bombardment_stance = $bombardment$ ] 

			#special ships
			[[Annihilator] while = { count = $Annihilator$ create_ship = { design = NAME_KUAT_Annihilator } }]
			[[Eclipse] while = { count = $Eclipse$ create_ship = { design = Name_boss_eclipse } }]
			[[Compellor] while = { count = $Compellor$ create_ship = { design = NAME_KUAT_COMPELLOR } }]
			[[Legator] while = { count = $Legator$ create_ship = { design = NAME_KUAT_LAGATOR } }]

			#invasion ships
			[[Infinite_Battleship] while = { count = $Infinite_Battleship$ create_ship = { design = Name_boss_crisis_IBC_$DIFF$ } }]
			[[Infinite_Crusier] while = { count = $Infinite_Crusier$ create_ship = { design = Name_boss_crisis_IC_$DIFF$ } }]
			[[Infinite_Mothership] while = { count = $Infinite_Mothership$ create_ship = { design = Name_boss_crisis_IMS_$DIFF$ } }]

			#Drift ships
			[[Drift_Battleship] while = { count = $Drift_Battleship$ create_ship = { design = Name_boss_crisis_DB_$DIFF$ effect = {
				kuat_battle_disable_ship_at_health = { FLAG = enable_drft_ship_inital Disable_health = 0.01 WHICH = DRFT_SHIP_HEALTH_VAR HEALTH = $HEALTH|1$ }
			} } }]
			[[Drift_Crusier] while = { count = $Drift_Crusier$ create_ship = { design = Name_boss_crisis_DC_$DIFF$ effect = {
				kuat_battle_disable_ship_at_health = { FLAG = enable_drft_ship_inital Disable_health = 0.01 WHICH = DRFT_SHIP_HEALTH_VAR HEALTH = $HEALTH|1$ }
			} } }]

			#player ships
			[[Balletor] while = { count = $Balletor$ create_ship = { design = Name_boss_CRISIS_Balletor_$DIFF$ } }]
			[[Titan] while = { count = $Titan$ create_ship = { design = Name_boss_CRISIS_Titan_$DIFF$ } }]
			[[Tyrant] while = { count = $Tyrant$ create_ship = { design = Name_criss_boss_Tyrant_$DIFF$ } }]

			[[Sector] while = { count = $Sector$ create_ship = { design = Name_boss_crisis_Sector_$DIFF$ } }]
			[[Venganza] while = { count = $Venganza$ create_ship = { design = Name_boss_crisis_Venganza_$DIFF$ } }]
			[[Dominance] while = { count = $Dominance$ create_ship = { design = Name_boss_CRISIS_Dominance_$DIFF$ } }]
			[[Resugrant] while = { count = $Resugrant$ create_ship = { design = Name_boss_crisis_Resugrant_$DIFF$ } }]
			[[Imperial] while = { count = $Imperial$ create_ship = { design = Name_boss_crisis_EMPIRE_$DIFF$ } }]
			[[high_Imperial] while = { count = $high_Imperial$ create_ship = { design = Name_boss_crisis_HIGH_EMPIRE_$DIFF$ } }]
			[[Harrower] while = { count = $Harrower$ create_ship = { design = Name_criss_boss_Horriwer_$DIFF$ } }]
			[[Cavelry] while = { count = $Cavelry$ create_ship = { design = Name_criss_boss_Cavelry_$DIFF$ } }]
			[[Eternal_battleship] while = { count = $Eternal_battleship$ create_ship = { design = Name_boss_crisis_EBC_$DIFF$ } }] 
			[[Eternal_flagship] while = { count = $Eternal_flagship$ create_ship = { design = Name_boss_crisis_EFS_$DIFF$ } }] 

			#String varaible
			[[Location] set_location = { target = $Location$ distance = 25 angle = random }]
			[[Flagship_flag] random_owned_ship = { limit = { is_ship_size = $ship_class$ } set_ship_flag = $Flagship_flag$ }]
			[[Disable_health] every_owned_ship = { kuat_battle_disable_ship_at_health = { FLAG = kuat_battle_disable_ship_at_health Disable_health = $Disable_health$ } }]
			[[modifier] add_modifier = { modifier = $modifier$ }]

			#fleet target
			[[CTL_TARGET] $CTL_TARGET$ = { change_variable = { which = fleet_id value = 1 } } 
				set_variable = { which = fleet_id value = $CTL_TARGET$.fleet_id } 
				solar_system = { set_variable = { which = kuat_fleet_id value = prev.fleet_id } 
			}]
			[[Fleet_action] fleet_event = { id = $Fleet_action$ }]
			[[Fleet_delayed_action] fleet_event = { id = $Fleet_delayed_action$ days = $DAYS$ random = $DAYS$ }]
		}
	}
}

#starkiller check effect
starkiller_destroyed_system_everything = {
	optimize_memory
	set_update_modifiers_batch = begin
	fire_on_action = { on_action = on_destroy_star_system }
	set_star_flag = star_cracked
	every_system_planet = {
		limit = { is_star = yes }
		create_ambient_object = { type = "star_explosion" play_animation_once = yes location = this }
		last_created_ambient_object = { set_location = { target = prev distance = 0 angle = random } }
		create_ambient_object = { type = "destroyed_system" location = this }
        last_created_ambient_object = { set_ambient_object_flag = destroyed_system_effect set_location = { target = prev  distance = 0  angle = random  } }
	}
	every_system_planet = {
		clear_deposits = yes
		clear_planet_modifiers = yes
		prevent_anomaly = yes
	}
	root = { random_owned_fleet = { 
		save_event_target_as = foa_target_fleet 
		random_owned_ship = { save_event_target_as = foa_target_ship }
	} }
	every_fleet_in_system = {
		limit = { 
			exists = owner
			owner = { NOR = { 
				is_same_value = root 
				is_kuat_fallen_empire = yes
			} } 
		}
		foa_effect_the_crisis_fleet = yes
		foa_effect_the_crisis_ship = yes
		foa_effect_the_crisis_starbase = yes
		destroy_fleet = { target = this destroy_template = yes kill_leader = yes }
	}
	every_system_megastructure = {
		if = {
			limit = { OR = {
				is_megastructure_type = ring_world_restored 
				is_megastructure_type = ring_world_ruined
				is_megastructure_type = ring_world_2
				is_megastructure_type = kuat_ring_world_1
				is_megastructure_type = kuat_ring_world_2
			} }
			solar_system = {
				spawn_planet = {
					class = "pc_ringworld_tech_damaged"
					location = prev
					orbit_angle_offset = 30
				}
				spawn_planet = {
					class = "pc_ringworld_seam_damaged"
					location = prev
				}
				spawn_planet = {
					class = "pc_ringworld_habitable_damaged"
					location = prev
					orbit_angle_offset = -30
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = spy_orb_1
				is_megastructure_type = spy_orb_2
				is_megastructure_type = spy_orb_3
				is_megastructure_type = spy_orb_4
				is_megastructure_type = spy_orb_ruined
				is_megastructure_type = spy_orb_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "spy_orb_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = think_tank_1
				is_megastructure_type = think_tank_2
				is_megastructure_type = think_tank_3
				is_megastructure_type = think_tank_4
				is_megastructure_type = think_tank_ruined
				is_megastructure_type = think_tank_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "think_tank_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = strategic_coordination_center_1
				is_megastructure_type = strategic_coordination_center_2
				is_megastructure_type = strategic_coordination_center_3
				is_megastructure_type = strategic_coordination_center_ruined
				is_megastructure_type = strategic_coordination_center_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "strategic_coordination_center_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = mega_art_installation_1
					is_megastructure_type = mega_art_installation_2
					is_megastructure_type = mega_art_installation_3
					is_megastructure_type = mega_art_installation_4
					is_megastructure_type = strategic_coordination_center_ruined
					is_megastructure_type = strategic_coordination_center_restored
				}
			}
			solar_system = {
				spawn_megastructure = { 
					type = "mega_art_installation_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = interstellar_assembly_1
				is_megastructure_type = interstellar_assembly_2
				is_megastructure_type = interstellar_assembly_3
				is_megastructure_type = interstellar_assembly_4
				is_megastructure_type = interstellar_assembly_ruined
				is_megastructure_type = interstellar_assembly_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "interstellar_assembly_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = mega_shipyard_1
				is_megastructure_type = mega_shipyard_2
				is_megastructure_type = mega_shipyard_3
				is_megastructure_type = mega_shipyard_ruined
				is_megastructure_type = mega_shipyard_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "mega_shipyard_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = matter_decompressor_1
				is_megastructure_type = matter_decompressor_2
				is_megastructure_type = matter_decompressor_3
				is_megastructure_type = matter_decompressor_4
				is_megastructure_type = matter_decompressor_ruined
				is_megastructure_type = matter_decompressor_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "matter_decompressor_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = quantum_catapult_1
					is_megastructure_type = quantum_catapult_2
					is_megastructure_type = quantum_catapult_3
					is_megastructure_type = quantum_catapult_ruined
					is_megastructure_type = quantum_catapult_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "quantum_catapult_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = hyper_relay
					is_megastructure_type = hyper_relay_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "hyper_relay_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { is_crisis_sphere = yes }
			solar_system = {
				spawn_megastructure = {
					type = crisis_sphere_ruined
					coords_from = prev
					init_effect = {
						random_country = {
							limit = {
								prev = { has_megastructure_flag = crisis_sphere_of@prev }
							}
							save_event_target_as = former_owner
						}
						set_megastructure_flag = crisis_sphere_of@event_target:former_owner
					}
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = exe_outer_gate
				is_megastructure_type = exe_outer_gate_locked
				is_megastructure_type = exe_outer_gate_disable
				is_megastructure_type = Shield_Gate
			} }
			set_timed_megastructure_flag = { flag = kuat_gate_being_attack days = 1 }
		}
		else = { remove_megastructure = this }
	}
	system_event = { id = kuat_starkiller.8 days = 120 }
	set_update_modifiers_batch = end
}

#scope: fleet
foa_effect_the_crisis_fleet = {
	optimize_memory
	root = { fire_on_action = {
		on_action = on_fleet_destroyed_perp
		scopes = {
			from = prev.owner
			fromfrom = event_target:foa_target_fleet
			fromfromfrom = prev
		}
	} }
	owner = { fire_on_action = {
		on_action = on_fleet_destroyed_victim
		scopes = {
			from = root
			fromfrom = prev
			fromfromfrom = event_target:foa_target_fleet
		}
	} }
}

#scope: ship
foa_effect_the_crisis_ship = {
	optimize_memory
	every_owned_ship = {
		root = { fire_on_action = {
			on_action = on_ship_destroyed_perp
			scopes = {
				from = prev.owner
				fromfrom = event_target:foa_target_ship
				fromfromfrom = prev
			}
		} }
		owner = { fire_on_action = {
			on_action = on_ship_destroyed_victim
			scopes = {
				from = root
				fromfrom = prev
				fromfromfrom = event_target:foa_target_ship
			}
		} }
	}
}

#scope: starbase
foa_effect_the_crisis_starbase = {
	optimize_memory
	if = {
		limit = { is_ship_class = shipclass_starbase }
		starbase = { fire_on_action = {
			on_action = on_starbase_destroyed
			scopes = { from = event_target:foa_target_fleet }
		} }
	}
}

reset_return_eternal_fleet = {
	optimize_memory
	if = {
		limit = { kuat_is_enable_apocalyptic_origin = yes }
		remove_global_flag = enable_the_eternal_starbase
		remove_global_flag = kuat_eternal_invasion_can_win_the_fleet
		remove_global_flag = exe_return_invasion_seed
		remove_global_flag = exe_return_invasion_3_fired
		remove_global_flag = exe_return_invasion_5_fired
		remove_global_flag = exe_return_invasion_7_fired
		remove_global_flag = exe_return_invasion_begin
		remove_global_flag = exe_return_invasion_ended
		remove_global_flag = ban_exe_invasion
		remove_global_flag = kuat_eternal_invasion_can_win_the_fleet_stage_1
		remove_country_flag = fire_first_find
		remove_country_flag = second_first_find
		remove_country_flag = third_first_find
		clear_variable = num_vaild_system
		clear_variable = num_finish
		every_system = {
			limit = {
				OR = {
					has_star_flag = final_1_system
					has_star_flag = final_2_system
					has_star_flag = final_3_system
				}
			}
			remove_star_flag = final_1_system
			remove_star_flag = final_2_system
			remove_star_flag = final_3_system
		}
		remove_country_flag = exe_return_invasion_2_fired
		set_global_flag = enbale_last_invasion
	}
	else_if = {
		limit = { has_global_flag = enbale_recycle_last_invasion }
		remove_global_flag = enable_the_eternal_starbase
		remove_global_flag = kuat_eternal_invasion_can_win_the_fleet
		remove_global_flag = exe_return_invasion_seed
		remove_global_flag = exe_return_invasion_3_fired
		remove_global_flag = exe_return_invasion_5_fired
		remove_global_flag = exe_return_invasion_7_fired
		remove_global_flag = exe_return_invasion_begin
		remove_global_flag = exe_return_invasion_ended
		remove_global_flag = enbale_last_invasion
		remove_global_flag = ban_exe_invasion
		remove_global_flag = kuat_eternal_invasion_can_win_the_fleet_stage_1
		remove_country_flag = fire_first_find
		remove_country_flag = second_first_find
		remove_country_flag = third_first_find
		clear_variable = num_vaild_system
		clear_variable = num_finish
		every_system = {
			limit = {
				OR = {
					has_star_flag = final_1_system
					has_star_flag = final_2_system
					has_star_flag = final_3_system
				}
			}
			remove_star_flag = final_1_system
			remove_star_flag = final_2_system
			remove_star_flag = final_3_system
		}
		remove_country_flag = exe_return_invasion_2_fired
	}
	else = {
		remove_global_flag = enable_the_eternal_starbase
		remove_global_flag = kuat_eternal_invasion_can_win_the_fleet
		remove_global_flag = exe_return_invasion_seed
		remove_global_flag = exe_return_invasion_3_fired
		remove_global_flag = exe_return_invasion_5_fired
		remove_global_flag = exe_return_invasion_7_fired
		remove_global_flag = exe_return_invasion_begin
		remove_global_flag = exe_return_invasion_ended
		remove_global_flag = kuat_eternal_invasion_can_win_the_fleet_stage_1
		remove_country_flag = fire_first_find
		remove_country_flag = second_first_find
		remove_country_flag = third_first_find
		clear_variable = num_vaild_system
		clear_variable = num_finish
		every_system = {
			limit = {
				OR = {
					has_star_flag = final_1_system
					has_star_flag = final_2_system
					has_star_flag = final_3_system
				}
			}
			remove_star_flag = final_1_system
			remove_star_flag = final_2_system
			remove_star_flag = final_3_system
		}
		remove_country_flag = exe_return_invasion_2_fired
		set_global_flag = enbale_last_invasion
	}
}

kuat_orgin_initial_starbase_kuat_system = {
	optimize_memory
	event_target:Kuat_system_int = {
		create_starbase = {
			size = "starbase_citadel"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			building = "target_uplink_computer"
			building = "colossus_yards"
			building = "titan_yards"
			building = "crew_quarters"
			owner = root
		}
	}
	event_target:Kuat_system_int_1 = {
		create_starbase = {
			size = "starbase_citadel"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			building = "target_uplink_computer"
			building = "colossus_yards"
			building = "titan_yards"
			building = "crew_quarters"
			owner = root
		}
	}
	event_target:Kuat_system_int_2 = {
		create_starbase = {
			size = "starbase_citadel"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			building = "target_uplink_computer"
			building = "colossus_yards"
			building = "titan_yards"
			building = "crew_quarters"
			owner = root
		}
	}
	event_target:Kuat_system_int_3 = {
		create_starbase = {
			size = "starbase_citadel"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			building = "target_uplink_computer"
			building = "colossus_yards"
			building = "titan_yards"
			building = "crew_quarters"
			owner = root
		}
	}
	event_target:Kuat_system_int_4 = {
		create_starbase = {
			size = "starbase_citadel"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			module = "shipyard"
			building = "target_uplink_computer"
			building = "colossus_yards"
			building = "titan_yards"
			building = "crew_quarters"
			owner = root
		}
	}
}

kuat_origin_give_all_ship_and_tech = {
	optimize_memory
	set_global_flag = kuat_enable_BlackholeShipyard_1
	set_country_flag = kuat_can_buid_kuat_building
	set_country_flag = can_restore_the_black_hole
	set_country_flag = kuat_unlock_the_flagship_designable
	set_country_flag = can_build_supermacy
	set_country_flag = kuat_debug_give_all_tech_flag
	give_technology = { tech = tech_kuat_ground_yards message = no }
	give_technology = { tech = tech_kuat_megastructrue message = no }
	give_technology = { tech = tech_kuat_resource_center message = no }
	give_technology = { tech = tech_kuat_command_center message = no }
	give_technology = { tech = tech_kuat_founfry message = no }
	give_technology = { tech = tech_kuat_databank message = no }
	give_technology = { tech = tech_kuat_shield message = no }
	give_technology = { tech = tech_kuat_reactor message = no }
	give_technology = { tech = tech_kuat_THRUSTER message = no }
	give_technology = { tech = tech_exe_jump_drive message = no }
	give_technology = { tech = tech_kuat_noway message = no }
	give_technology = { tech = tech_eternal_fleet message = no }
	give_technology = { tech = tech_kuat_starbase message = no }
	give_technology = { tech = tech_kuat_megastructrue message = no }
	if = {
		limit = { NOT = { has_existing_ship_design = Venator_modifier } }
		create_ship_design = { design = "Name_boss_Venator" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = Venator_modifier_II } }
		create_ship_design = { design = "Name_boss_Venator_II" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = swfo_resurgent } }
		create_ship_design = { design = "Name_boss_Resugrant" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = Cavelry } }
		create_ship_design = { design = "Name_boss_Cavelry" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = horrizone } }
		create_ship_design = { design = "Name_boss_Horriwer" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = high_Imperial_star_destroyer } }
		create_ship_design = { design = "Name_boss_HIGH_EMPIRE" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = Vengeance } }
		create_ship_design = { design = "Name_boss_Venganza" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = nebula_dominance } }
		create_ship_design = { design = "Name_boss_Dominance" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = kuat_compellor } }
		create_ship_design = { design = "NAME_KUAT_COMPELLOR" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = kuat_legator } }
		create_ship_design = { design = "NAME_KUAT_LAGATOR" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = eclipse } }
		create_ship_design = { design = "Name_boss_eclipse" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = X308_Balletor } }
		create_ship_design = { design = "Name_boss_X308_Balletor" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = X308_Titan } }
		create_ship_design = { design = "Name_boss_X308_Titan" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = X308_Tyrant } }
		create_ship_design = { design = "NAME_KUAT_Tyrant" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = Annihilator } }
		create_ship_design = { design = "NAME_KUAT_Annihilator" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = kuat_sector } }
		create_ship_design = { design = "Name_boss_Sector" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = nebula_executor } }
		create_ship_design = { design = "NAME_KUAT_EXECUTOR_1" }
		add_ship_design = last_created_design
	}
	if = {
		limit = { NOT = { has_existing_ship_design = knight_hammer_executor } }
		create_ship_design = { design = "NAME_KUAT_EXECUTOR" }
		add_ship_design = last_created_design
	}
}

kuat_research_all_technology = {
	optimize_memory
	create_country = {
		name = random
		type = fallen_empire
		ignore_initial_colony_error = yes
		authority = auth_imperial
		civics = {
			civic = civic_lethargic_leadership
			civic = civic_empire_in_decline
		}
		species = root
		ethos = { ethic = ethic_fanatic_materialist }
		flag = random
		origin = "origin_fallen_empire"
		effect = {
			set_country_flag = protected_from_queen_storm
			save_event_target_as = kuat_tech_country
			set_graphical_culture = "fallen_empire_02"
			set_city_graphical_culture = "fallen_empire_02"
		}
	}
	copy_techs_from = { target = event_target:kuat_tech_country }
}

# swapper planet districts
# DISTRICT1 = district_city
# DISTRICT2 = district_industrial
# DISTRICT3 = district_arcology_swgs_science
# PLANET = pc_swgs_engineer
kuat_swapping_planet_artificial_planet_district = {
	optimize_memory
	if = {
		limit = { OR = {
			has_district = $DISTRICT1$
			has_district = $DISTRICT2$
		} }
		export_trigger_value_to_variable = {
			trigger = num_districts
			parameters = { type = $DISTRICT1$ }
			variable = swap_$DISTRICT1$_variable
		}
		export_trigger_value_to_variable = {
			trigger = num_districts
			parameters = { type = $DISTRICT2$ }
			variable = swap_$DISTRICT2$_variable
		}
		clear_deposits = yes
		change_pc = $PLANET$
		while = {
			count = swap_$DISTRICT1$_variable
			remove_district = $DISTRICT1$
			add_district = $DISTRICT3$
		}
		while = {
			count = swap_$DISTRICT2$_variable
			remove_district = $DISTRICT2$
			add_district = $DISTRICT3$
		}
	}
	else_if = {
		limit = { has_district = $DISTRICT1$ NOT = {
			has_district = $DISTRICT2$
		} }
		export_trigger_value_to_variable = {
			trigger = num_districts
			parameters = { type = $DISTRICT1$ }
			variable = swap_$DISTRICT1$_variable
		}
		clear_deposits = yes
		change_pc = $PLANET$
		while = {
			count = swap_$DISTRICT1$_variable
			remove_district = $DISTRICT1$
			add_district = $DISTRICT3$
		}
	}
	else_if = {
		limit = { has_district = $DISTRICT2$ NOT = {
			has_district = $DISTRICT1$
		} }
		export_trigger_value_to_variable = {
			trigger = num_districts
			parameters = { type = $DISTRICT2$ }
			variable = swap_$DISTRICT2$_variable
		}
		clear_deposits = yes
		change_pc = $PLANET$
		while = {
			count = swap_$DISTRICT2$_variable
			remove_district = $DISTRICT2$
			add_district = $DISTRICT3$
		}
	}	
	else = {
		remove_all_districts = yes
		clear_deposits = yes change_pc = $PLANET$
	}
}

# Galatic council focus
kuat_repeal_all_crisis_resolutions = {
	optimize_memory
	remove_global_flag = galactic_focus_crisis_eternal_fleet
	cancel_resolution = resolution_galactic_focus_crisis_eternal_fleet
	remove_global_flag = galactic_focus_crisis_return_eternal_fleet
	cancel_resolution = resolution_galactic_focus_crisis_return_eternal_fleet
}

#scope:ship
flagship_building_check = {
	optimize_memory
	owner = {
		set_variable = { which = SHIP_LIMIT_VAR_$SHIPSIZE$ value = 0 }
		set_variable = { which = SHIP_LIMIT_STANDARD_VAR_$SHIPSIZE$ value = $SHIP_LIMIT$ }
		if = { limit = { has_country_flag = all_flagship_building_limit_1 } set_variable = { which = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ value = 1 } }
		if = { limit = { has_country_flag = all_flagship_building_limit_2 } set_variable = { which = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ value = 2 } }
		if = { limit = { has_country_flag = all_flagship_building_limit_3 } set_variable = { which = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ value = 3 } }
		if = { limit = { has_country_flag = all_flagship_building_limit_4 } set_variable = { which = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ value = 4 } }
		if = { limit = { has_country_flag = all_flagship_building_limit_5 } set_variable = { which = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ value = 5 } }
		if = { limit = { has_country_flag = all_flagship_building_limit_6 } set_variable = { which = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ value = 6 } }
		if = { limit = { has_country_flag = all_flagship_building_limit_7 } set_variable = { which = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ value = 7 } }
		if = { limit = { has_country_flag = all_flagship_building_limit_8 } set_variable = { which = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ value = 8 } }
		if = { limit = { has_country_flag = all_flagship_building_limit_9 } set_variable = { which = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ value = 9 } }
		change_variable = { which = SHIP_LIMIT_VAR_$SHIPSIZE$ value = SHIP_LIMIT_STANDARD_VAR_$SHIPSIZE$ }
		change_variable = { which = SHIP_LIMIT_VAR_$SHIPSIZE$ value = SHIP_LIMIT_ADDON_VAR_$SHIPSIZE$ }
		if = {
			limit = { any_owned_ship = { NOT = { is_same_value = prevprev } is_ship_size = $SHIPSIZE$ } }
			export_trigger_value_to_variable = {
				trigger = count_owned_ship
				parameters = { limit = { NOT = { is_same_value = prevprev } is_ship_size = $SHIPSIZE$ } }
				variable = system_active_check_$SHIPSIZE$
			}
		}
		else_if = {
			limit = { count_owned_ship = { limit = { NOT = { is_same_value = prevprev } is_ship_size = $SHIPSIZE$ } count = 0 } }
			set_variable = { which = system_active_check_$SHIPSIZE$ value = 0 }
		}
		set_variable = { which = system_active_$SHIPSIZE$ value = system_active_check_$SHIPSIZE$ }
		change_variable = { which = system_active_$SHIPSIZE$ value = 1 }
	}
	if = { 
		limit = { owner = { check_variable = { which = system_active_$SHIPSIZE$ value > SHIP_LIMIT_VAR_$SHIPSIZE$ } } } 
		owner = { subtract_variable = { which = system_active_$SHIPSIZE$ value = 1 } country_event = { id = kuat_starkiller.12 } add_resource = { alloys = 3500 } } 
		destroy_ship = this 
	}
}

#((人口数+人口增长总额*0.2（1-10000）)*10%星球规模+年份)*阶段系数(0.1-1.0)
kuat_automatic_ai_colony = {
	set_update_modifiers_batch = begin
	owner = { save_event_target_as = changing_country }
	set_planet_flag = has_building_kuat_command_center_auto
	set_variable = { which = planet_production_ascension_tier value = trigger:has_planetary_ascension_tier }
	if = {
		limit = { has_planet_flag = PR_flg_plnt_VALID }
		set_variable = { which = planet_production_array_base value = value:PR_sv_plnt_HC }
	}
	else = { set_variable = { which = planet_production_array_base value = trigger:num_pops } }

	set_variable = { which = planet_production_array_pop_speed_total value = 0 }
	
	if = {
		limit = { check_modifier_value = { modifier = pop_growth_speed value >= 0 } }
		set_variable = { which = planet_production_array_growpop_speed_base value = modifier:pop_growth_speed }
		change_variable = { which = planet_production_array_pop_speed_total value = planet_production_array_growpop_speed_base }
	}
	if = {
		limit = { check_modifier_value = { modifier = planet_pop_assembly_organic_add value >= 0 } }
		set_variable = { which = planet_production_array_organicpop_speed_base value = modifier:planet_pop_assembly_organic_add }
		if = {
			limit = { check_modifier_value = { modifier = planet_pop_assembly_organic_mult value >= 0 } }
			multiply_variable = { which = planet_production_array_organicpop_speed_base value = modifier:planet_pop_assembly_organic_mult }
		}
		change_variable = { which = planet_production_array_pop_speed_total value = planet_production_array_organicpop_speed_base }
	}
	if = {
		limit = { check_modifier_value = { modifier = planet_pop_assembly_add value >= 0 } }
		set_variable = { which = planet_production_array_pop_speed_base value = modifier:planet_pop_assembly_add }
		if = {
			limit = { check_modifier_value = { modifier = planet_pop_assembly_mult value >= 0 } }
			multiply_variable = { which = planet_production_array_pop_speed_base value = modifier:planet_pop_assembly_mult }
		}
		change_variable = { which = planet_production_array_pop_speed_total value = planet_production_array_pop_speed_base }
	}

	if = { limit = { is_capital = yes } set_timed_planet_flag = { flag = destroy_colony_capital_temple days = 1 } }
	every_owned_pop = { kill_pop = yes }
	if = { limit = { is_capital = no } clear_deposits = yes }
	clear_blockers = yes
	remove_all_buildings = yes
	remove_all_districts = yes
	clear_planet_modifiers = yes
	destroy_colony = yes

	add_building = building_kuat_command_center_auto
	add_building = building_kuat_databank_auto
	add_building = building_kuat_ancient_databank_auto
	add_building = building_kuat_foundry_auto
	add_building = building_kuat_resource_center_auto
	add_building = building_kuat_shield_auto
	add_building = building_kuat_ground_yards_auto
	add_building = building_kuat_research_center_auto

	set_owner = event_target:changing_country
	while = { count = 5 create_pop = { species = owner_main_species } }
	add_modifier = { modifier = planet_population_control }
	add_modifier = { modifier = planet_population_control_gestalt }
	add_modifier = { modifier = planet_robot_assembly_control }
	add_modifier = { modifier = kuat_automatic_colony }
	if = { limit = { has_planet_flag = destroy_colony_capital_temple } set_capital = yes }
	set_planetary_ascension_tier = planet_production_ascension_tier
	kuat_reset_auto_colony_variable = yes
	set_update_modifiers_batch = end
}

kuat_reset_auto_colony_variable = {
	if = {
		limit = { OR = {
			NOT = { has_building = building_kuat_command_center_auto }
			NOT = { has_building = building_kuat_databank_auto }
			NOT = { has_building = building_kuat_ancient_databank_auto }
			NOT = { has_building = building_kuat_foundry_auto }
			NOT = { has_building = building_kuat_resource_center_auto }
			NOT = { has_building = building_kuat_shield_auto }
			NOT = { has_building = building_kuat_ground_yards_auto }
			NOT = { has_building = building_kuat_research_center_auto }
		} }
		remove_all_buildings = yes
		add_building = building_kuat_command_center_auto
		add_building = building_kuat_databank_auto
		add_building = building_kuat_ancient_databank_auto
		add_building = building_kuat_foundry_auto
		add_building = building_kuat_resource_center_auto
		add_building = building_kuat_shield_auto
		add_building = building_kuat_ground_yards_auto
		add_building = building_kuat_research_center_auto
	}
	if = {
		limit = { NOT = { num_pops = 5 } NOT = { has_planet_flag = PR_flg_plnt_VALID } }
		set_variable = { which = planet_temple_return_pop value = trigger:num_pops }
		subtract_variable = { which = planet_temple_return_pop value = 5 }
		multiply_variable = { which = planet_temple_return_pop value = -1 }
		if = {
			limit = { check_variable = { which = planet_temple_return_pop value > 0 } }
			while = { 
				count = planet_temple_return_pop create_pop = { species = owner_main_species } 
				subtract_variable = { which = planet_production_array value = 5 }
			}
		}
		else_if = {
			limit = { check_variable = { which = planet_temple_return_pop value < 0 } }
			multiply_variable = { which = planet_temple_return_pop value = -1 }
			while = { 
				count = planet_temple_return_pop random_owned_pop = { kill_pop = yes } 
				change_variable = { which = planet_production_array value = 5 }
			}
		}
	}

	change_variable = { which = planet_production_array_pop_speed_total_dynamic value = planet_production_array_pop_speed_total }
	if = {
		limit = { check_variable = { which = planet_production_array_pop_speed_total_dynamic value > 10000 } }
		set_variable = { which = planet_production_array_pop_speed_total_dynamic value = 10000 }
	}
	multiply_variable = { which = planet_production_array_pop_speed_total_dynamic value = 0.2 }

	set_variable = { which = planet_production_array value = planet_production_array_base }
	change_variable = { which = planet_production_array value = planet_production_array_pop_speed_total_dynamic }
	multiply_variable = { which = planet_production_array value = trigger:planet_size }
	multiply_variable = { which = planet_production_array value = 0.1 }
	change_variable = { which = planet_production_array value = trigger:years_passed }

	if = { limit = { years_passed >= 100 } multiply_variable = { which = planet_production_array value = 1.0 } }
	else_if = { limit = { years_passed >= 90 } multiply_variable = { which = planet_production_array value = 0.9 } }
	else_if = { limit = { years_passed >= 80 } multiply_variable = { which = planet_production_array value = 0.8 } }
	else_if = { limit = { years_passed >= 70 } multiply_variable = { which = planet_production_array value = 0.7 } }
	else_if = { limit = { years_passed >= 60 } multiply_variable = { which = planet_production_array value = 0.6 } }
	else_if = { limit = { years_passed >= 50 } multiply_variable = { which = planet_production_array value = 0.5 } }
	else_if = { limit = { years_passed >= 40 } multiply_variable = { which = planet_production_array value = 0.4 } }
	else_if = { limit = { years_passed >= 30 } multiply_variable = { which = planet_production_array value = 0.3 } }
	else_if = { limit = { years_passed >= 20 } multiply_variable = { which = planet_production_array value = 0.2 } }
	else = { multiply_variable = { which = planet_production_array value = 0.1 } }
	if = { limit = { owner = { is_ai = yes is_nirvana_empire = no } } multiply_variable = { which = planet_production_array value = 0.1 } }
	if = { limit = { owner = { is_ai = yes is_nirvana_empire = yes } } multiply_variable = { which = planet_production_array value = 0.2 } }
	floor_variable = planet_production_array
	if = {
		limit = { is_variable_set = planet_production_array_migrant }
		change_variable = { which = planet_production_array value = planet_production_array_migrant }
	}
}

kuat_move_auto_colony_data = {
	event_target:kuat_auto_planet_moving_target = {
		change_variable = { 
			which = planet_production_array_migrant 
			value = prev.planet_production_array 
		}
		kuat_reset_auto_colony_variable = yes
	}
	clear_variable = planet_production_array_base
	clear_variable = planet_production_array_growpop_speed_base
	clear_variable = planet_production_array_organicpop_speed_base
	clear_variable = planet_production_array_pop_speed_base
	clear_variable = planet_production_array_pop_speed_total
	clear_variable = planet_production_array_pop_speed_total_dynamic
	clear_variable = planet_production_array
	remove_planet_flag = has_building_kuat_command_center_auto
	remove_all_buildings = yes
	reroll_planet = yes
	clear_planet_modifiers = yes
	destroy_colony = yes
	every_owned_pop = { kill_pop = yes }
	remove_global_flag = Building_kuat_auto_planet_migrant_data_temple
}

#shipyard
create_kuat_shipyard_country = {
	create_country = {
		name = "Name_Kuat_Shipyard"
		type = kuat_shipyard
		flag = {
			icon = {
				category = "Kuat"
				file = "Kuat_flags_01.dds"
			}
			background = {
				category = "backgrounds"
				file = "00_solid.dds"
			}
			colors = { "blue" "blue" "null" "null" }
		}
		effect = {
			set_country_flag = protected_from_queen_storm
			add_modifier = { modifier = Elternal_creating }
			save_global_event_target_as = kuat_shipyard_country
		}
	}
	random_system = {
		limit = { is_capital_system = no }
		spawn_megastructure = {
			type = exe_outer_gate_disable
			orbit_angle = 225
			orbit_distance = 200
			planet = system_star
			owner = event_target:kuat_shipyard_country
		}
	}
	establish_communications_no_message = event_target:kuat_shipyard_country
}

kuat_rift_award = {
	add_monthly_resource_mult = {
		resource = engineering_research
		value = @tier3researchreward
		min = @tier3researchmin
		max = @tier3researchmax
	}
	add_monthly_resource_mult = {
		resource = physics_research
		value = @tier3researchreward
		min = @tier3researchmin
		max = @tier3researchmax
	}
	add_monthly_resource_mult = {
		resource = society_research
		value = @tier3researchreward
		min = @tier3researchmin
		max = @tier3researchmax
	}
	add_monthly_resource_mult = {
		resource = unity
		value = @tier1unityreward
		min = @tier1unitymin
		max = @tier1unitymax
	}
}

kuat_astral_thread_small_reward = {
	kuat_astral_thread_reward = { ADD = 0 }
}

kuat_astral_thread_medium_reward = {
	kuat_astral_thread_reward = { ADD = 50 }
}

kuat_astral_thread_large_reward = {
	kuat_astral_thread_reward = { ADD = 100 }
}

kuat_astral_thread_reward = {
	custom_tooltip = astral_threads_found
	locked_random_list = {
		1 = { kuat_add_resource_astral_threads = { VALUE = 60 ADD = $ADD$ } }
		1 = { kuat_add_resource_astral_threads = { VALUE = 80 ADD = $ADD$ } }
		1 = { kuat_add_resource_astral_threads = { VALUE = 100 ADD = $ADD$ } }
	}
}

kuat_add_resource_astral_threads = {
	if = {
		limit = { check_variable = { which = astral_threads_scripted_rewards_mult value < 1 } }
		set_variable = {
			which = astral_threads_scripted_rewards_mult
			value = 1
		}
	}
	add_resource = {
		astral_threads =  @\[( $VALUE$ * $MULT|1$ + $ADD|0$ )]
		mult = astral_threads_scripted_rewards_mult
	}
	hidden_effect = { country_event = { id = tutorial.1340 days = 5 } }
}

kuat_enable_settings_hell_tradition = {
	if = {
		limit = { NOT = { has_global_flag = ban_exe_invasion } }
		remove_global_flag = normal_exe_invasion
		remove_global_flag = easy_exe_invasion
		remove_global_flag = ban_exe_invasion
		remove_global_flag = difficult_exe_invasion
		set_global_flag = ban_exe_invasion
	}
	switch = {
		trigger = has_global_flag
		easy_exe_invasion = { event_target:global_event_country = {
			set_variable = { which = exe_invasion_difficult_global_var value = 1 } 
			if = {
				limit = { has_global_flag = kuat_impulse_mod_settings }
				multiply_variable = { which = exe_invasion_difficult_global_var value = 1 }
			}
		} }
		normal_exe_invasion = { event_target:global_event_country = {
			set_variable = { which = exe_invasion_difficult_global_var value = 2 } 
			if = {
				limit = { has_global_flag = kuat_impulse_mod_settings }
				multiply_variable = { which = exe_invasion_difficult_global_var value = 2 }
			}
		} }
		difficult_exe_invasion = { event_target:global_event_country = {
			set_variable = { which = exe_invasion_difficult_global_var value = 3 } 
			if = {
				limit = { has_global_flag = kuat_impulse_mod_settings }
				multiply_variable = { which = exe_invasion_difficult_global_var value = 3 }
			}
		} }
		ban_exe_invasion = { event_target:global_event_country = {
			set_variable = { which = exe_invasion_difficult_global_var value = 4 } 
			if = {
				limit = { has_global_flag = kuat_impulse_mod_settings }
				multiply_variable = { which = exe_invasion_difficult_global_var value = 4 }
			}
		} }
	}
	country_event = { id = exe_invasion.1004 }
}

destroy_system_everything_random = {
	random_system_within_border = {
		limit = { any_system_planet = { is_colony = yes } }
		every_system_planet = {
			limit = { is_colony = yes }
			reset_planet = yes
			destroy_colony = yes
			if = {
				limit = { kuat_is_ringworld = yes }
				spawn_ringworld_cracker_effect = yes
				change_pc = pc_ringworld_habitable_damaged
				set_planet_entity = { entity = ringworld_habitable_damaged_entity }
			}
			else_if = {
				limit = { kuat_is_habitat = yes }
				spawn_habitat_cracker_effect = yes
				remove_planet = yes
			}
			else_if = {
				limit = { has_modifier = "holy_planet" }
				change_pc = pc_shattered
				remove_modifier = "holy_planet"
				add_modifier = { modifier = "ag_shattered_holy_planet" }
			}
			else = { change_pc = pc_broken }
		}
		starkiller_destroyed_system_everything_random = yes
	}
}

starkiller_destroyed_system_everything_random = {
	optimize_memory
	star = { change_pc = pc_black_hole }
	set_star_class = sc_black_hole 
	fire_on_action = { on_action = on_destroy_star_system }
	set_star_flag = star_cracked
	every_system_planet = {
		limit = { is_star = yes }
		create_ambient_object = { type = "star_explosion" play_animation_once = yes location = this }
		last_created_ambient_object = { set_location = { target = prev distance = 0 angle = random } }
		create_ambient_object = { type = "destroyed_system" location = this }
        last_created_ambient_object = { set_ambient_object_flag = destroyed_system_effect set_location = { target = prev  distance = 0  angle = random  } }
	}
	every_system_planet = {
		clear_deposits = yes
		clear_planet_modifiers = yes
		prevent_anomaly = yes
	}
	root = { random_owned_fleet = { 
		save_event_target_as = foa_target_fleet 
		random_owned_ship = { save_event_target_as = foa_target_ship }
	} }
	every_fleet_in_system = {
		destroy_fleet = { target = this destroy_template = yes kill_leader = yes }
	}
	every_system_megastructure = {
		if = {
			limit = { OR = {
				is_megastructure_type = ring_world_restored 
				is_megastructure_type = ring_world_ruined
				is_megastructure_type = ring_world_2
				is_megastructure_type = kuat_ring_world_1
				is_megastructure_type = kuat_ring_world_2
			} }
			solar_system = {
				spawn_planet = {
					class = "pc_ringworld_tech_damaged"
					location = prev
					orbit_angle_offset = 30
				}
				spawn_planet = {
					class = "pc_ringworld_seam_damaged"
					location = prev
				}
				spawn_planet = {
					class = "pc_ringworld_habitable_damaged"
					location = prev
					orbit_angle_offset = -30
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = spy_orb_1
				is_megastructure_type = spy_orb_2
				is_megastructure_type = spy_orb_3
				is_megastructure_type = spy_orb_4
				is_megastructure_type = spy_orb_ruined
				is_megastructure_type = spy_orb_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "spy_orb_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = think_tank_1
				is_megastructure_type = think_tank_2
				is_megastructure_type = think_tank_3
				is_megastructure_type = think_tank_4
				is_megastructure_type = think_tank_ruined
				is_megastructure_type = think_tank_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "think_tank_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = strategic_coordination_center_1
				is_megastructure_type = strategic_coordination_center_2
				is_megastructure_type = strategic_coordination_center_3
				is_megastructure_type = strategic_coordination_center_ruined
				is_megastructure_type = strategic_coordination_center_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "strategic_coordination_center_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = mega_art_installation_1
					is_megastructure_type = mega_art_installation_2
					is_megastructure_type = mega_art_installation_3
					is_megastructure_type = mega_art_installation_4
					is_megastructure_type = strategic_coordination_center_ruined
					is_megastructure_type = strategic_coordination_center_restored
				}
			}
			solar_system = {
				spawn_megastructure = { 
					type = "mega_art_installation_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = interstellar_assembly_1
				is_megastructure_type = interstellar_assembly_2
				is_megastructure_type = interstellar_assembly_3
				is_megastructure_type = interstellar_assembly_4
				is_megastructure_type = interstellar_assembly_ruined
				is_megastructure_type = interstellar_assembly_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "interstellar_assembly_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = mega_shipyard_1
				is_megastructure_type = mega_shipyard_2
				is_megastructure_type = mega_shipyard_3
				is_megastructure_type = mega_shipyard_ruined
				is_megastructure_type = mega_shipyard_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "mega_shipyard_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = matter_decompressor_1
				is_megastructure_type = matter_decompressor_2
				is_megastructure_type = matter_decompressor_3
				is_megastructure_type = matter_decompressor_4
				is_megastructure_type = matter_decompressor_ruined
				is_megastructure_type = matter_decompressor_restored
			} }
			solar_system = {
				spawn_megastructure = { 
					type = "matter_decompressor_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = quantum_catapult_1
					is_megastructure_type = quantum_catapult_2
					is_megastructure_type = quantum_catapult_3
					is_megastructure_type = quantum_catapult_ruined
					is_megastructure_type = quantum_catapult_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "quantum_catapult_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = hyper_relay
					is_megastructure_type = hyper_relay_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "hyper_relay_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { is_crisis_sphere = yes }
			solar_system = {
				spawn_megastructure = {
					type = crisis_sphere_ruined
					coords_from = prev
					init_effect = {
						random_country = {
							limit = {
								prev = { has_megastructure_flag = crisis_sphere_of@prev }
							}
							save_event_target_as = former_owner
						}
						set_megastructure_flag = crisis_sphere_of@event_target:former_owner
					}
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = exe_outer_gate
				is_megastructure_type = exe_outer_gate_locked
				is_megastructure_type = exe_outer_gate_disable
				is_megastructure_type = Shield_Gate
			} }
			set_timed_megastructure_flag = { flag = kuat_gate_being_attack days = 1 }
		}
		else = { remove_megastructure = this }
	}
}

kuat_unlock_all_gateway = {
	set_global_flag = kuat_shadow_war_prepare 
	every_megastructure = {
		limit = { is_megastructure_type = exe_outer_gate_disable }
		upgrade_megastructure_to = exe_outer_gate
		finish_upgrade = yes
	}
	every_playable_country = {
		limit = { is_ai = no }
		set_country_flag = can_pass_by set_country_flag = can_pass_inner_by country_event = { id = executor_build.46 }
	}
	every_megastructure = { limit = { is_megastructure_type = exe_outer_gate } activate_gateway = this }
}

#optimize
kuat_change_country_owner = {
	every_system = {
		limit = {
			exists = owner
			owner = { is_same_value = event_target:fallen_empire_kuat }
		}
		every_system_planet = {
			limit = {
				exists = owner
				owner = { is_same_value = event_target:fallen_empire_kuat }
				is_colony = yes
			}
			set_owner = $TARGET$
		}
		every_fleet_in_system = {
			limit = {
				exists = owner
				owner = { is_same_value = event_target:fallen_empire_kuat }
			}
			set_owner = $TARGET$
		}
	}
	every_country = {
		limit = { is_same_value = event_target:fallen_empire_kuat }
		destroy_country = yes
	}
}

Kuat_auto_colony_reserve = {
	if = {
		limit = { 
			check_variable_arithmetic = { which = modifier:country_resource_max_add value >= 100000 }
			resource_stockpile_compare = { resource = $TYPE$ value > modifier:country_resource_max_add } 
		}
		export_resource_stockpile_to_variable = { 
			resource = $TYPE$
			variable = Vop_resource_stockpile_compare_$TYPE$
		}
		multiply_variable = { which = Vop_resource_stockpile_compare_$TYPE$ value = $MULT$ }
		add_resource = { $TYPE$ = -1 mult = Vop_resource_stockpile_compare_$TYPE$ }
		clear_variable = Vop_resource_stockpile_compare_$TYPE$
	}
}

kuat_auto_colony_total_reserve = {
	Kuat_auto_colony_reserve = { TYPE = energy MULT = 0.5 }
	Kuat_auto_colony_reserve = { TYPE = food MULT = 0.5 }
	Kuat_auto_colony_reserve = { TYPE = minerals MULT = 0.5 }
	Kuat_auto_colony_reserve = { TYPE = alloys MULT = 0.25 }
	Kuat_auto_colony_reserve = { TYPE = consumer_goods MULT = 0.5 }
	Kuat_auto_colony_reserve = { TYPE = rare_crystals MULT = 0.25 }
	Kuat_auto_colony_reserve = { TYPE = exotic_gases MULT = 0.25 }
	Kuat_auto_colony_reserve = { TYPE = volatile_motes MULT = 0.25 }
	Kuat_auto_colony_reserve = { TYPE = nanites MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_dark_matter MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_zro MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_living_metal MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = minor_artifacts MULT = 0.10 }

	Kuat_auto_colony_reserve = { TYPE = sr_kyber_swgs MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_tibanna_swgs MULT = 0.10 }

	Kuat_auto_colony_reserve = { TYPE = sr_crystal_adf MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_parts_adf MULT = 0.10 }

	Kuat_auto_colony_reserve = { TYPE = sr_pantsu MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_neo MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_alpha MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_se MULT = 0.10 }

	Kuat_auto_colony_reserve = { TYPE = mind_club MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = azur_shippartbox MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = azur_red_diamond MULT = 0.10 }

	Kuat_auto_colony_reserve = { TYPE = acot_sr_dark_energy MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = acot_sr_stellarite MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = acot_sr_light_matter MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = aot_sr_runic_power MULT = 0.10 }

	Kuat_auto_colony_reserve = { TYPE = KZ_VOY_zero_g_crystal MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = KZ_VOY_dilithium_crystal MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = KZ_VOY_stellar_core MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = KZ_VOY_hyperstructure_alloys MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = KZ_VOY_stellar_sakura MULT = 0.10 }

	Kuat_auto_colony_reserve = { TYPE = sr_rosa_mystica MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_void_core MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_void_core_hidden MULT = 0.10 }

	Kuat_auto_colony_reserve = { TYPE = love_juice MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = holylight_crystal MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_christian MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = sr_beauty MULT = 0.10 }
	Kuat_auto_colony_reserve = { TYPE = excellent_slave MULT = 0.10 }

	Kuat_auto_colony_reserve = { TYPE = sr_jingling MULT = 0.10 }
}

kuat_str_auto_colony_total_reserve = {
	Kuat_auto_colony_reserve = { TYPE = energy MULT = 0.5 }
	Kuat_auto_colony_reserve = { TYPE = food MULT = 0.5 }
	Kuat_auto_colony_reserve = { TYPE = minerals MULT = 0.5 }
}

kuat_create_toasto_message = {
	create_message = {
		type = $KEY$
		localization = $KEY$_desc
		variable = {
			type = name
			localization = KUAT_FLEET_NAME
			scope = $TARGET$
		}
		target = $TARGET$
		recipient = $RECIPIENT$
		days = 30
	}
}