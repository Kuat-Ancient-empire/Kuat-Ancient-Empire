# scope: ship
increase_executor_power = {
	optimize_memory
	if = {
		limit = { has_hp <= 2000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ subtract = 1 }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_t5_times days = $DAYS$ }
	}
	else_if = {
		limit = { has_hp <= 4000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ subtract = 1 }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_t4_times days = $DAYS$ }
	}
	else_if = {
		limit = { has_hp <= 6000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ subtract = 1 }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_t3_times days = $DAYS$ }
	}
	else_if = {
		limit = { has_hp <= 8000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ subtract = 1 }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_t2_times days = $DAYS$ }
	}
	else_if = {
		limit = { has_hp <= 100000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ subtract = 1 }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_t1_times days = $DAYS$ }
	}
}

eternal_increase_executor_power = {
	optimize_memory
	if = {
		limit = { has_hp <= 20000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_5000000_times days = $DAYS$ }
	}
	else_if = {
		limit = { has_hp <= 40000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_4000000_times days = $DAYS$ }
	}
	else_if = {
		limit = { has_hp <= 60000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_3000000_times days = $DAYS$ }
	}
	else_if = {
		limit = { has_hp <= 80000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_2000000_times days = $DAYS$ }
	}
	else_if = {
		limit = { has_hp <= 100000000 }
		clear_ship_modifier = { modifier = ship_hull_mult DAYS = $DAYS$ }
		clear_ship_modifier = { modifier = ship_hull_regen_add_perc DAYS = $DAYS$ subtract = 1 }
		add_modifier = { modifier = increase_hp_1000000_times days = $DAYS$ }
	}
}

increase_ship_hp_effect_change = {
	optimize_memory
	if = {
		limit = { owner = { is_country_type = ag_kuat_invasion_country } }
		every_controlled_ship = {
			set_timed_ship_flag = { flag = is_invisiable_trigger days = $DAYS$ }
			eternal_increase_executor_power = { DAYS = $DAYS$ }
			ship_event = { id = exe_invasion.119 }
		}
	}
	else_if = {
		limit = { owner = { is_kuat_fallen_empire = yes } }
		every_controlled_ship = {
			set_timed_ship_flag = { flag = is_invisiable_trigger days = $DAYS$ }
			increase_executor_power = { DAYS = $DAYS$ }
			ship_event = { id = exe_invasion.119 }
		}
	}
	else = {
		every_controlled_ship = {
			set_timed_ship_flag = { flag = is_invisiable_trigger days = $DAYS$ }
			increase_executor_power = { DAYS = $DAYS$ }
			ship_event = { id = exe_invasion.119 }
		}
	}
	set_fleet_modifier = { SUB = Eternal_submit DAYS = $DAYS$ }
}

clear_ship_modifier = {
	optimize_memory
	export_modifier_to_variable = { modifier = $modifier$ variable = $modifier$_value_iep }
	subtract_variable = { which = $modifier$_value_iep value = $subtract|0$ }
	change_variable = { which = $modifier$_value_iep value = $change|0$ }
	divide_variable = { which = $modifier$_value_iep value = $divide|1$ }
	multiply_variable = { which = $modifier$_value_iep value = $multiply|1$ }
	add_modifier = { modifier = iep_basic_$modifier$ multiplier = $modifier$_value_iep days = $DAYS$ } 
	clear_variable = $modifier$_value_iep
}

remove_executor_power = {
	optimize_memory
	remove_modifier = iep_basic_ship_shield_penetration_mult
	remove_modifier = iep_basic_ship_armor_penetration_mult			
	remove_modifier = iep_basic_ship_armor_damage_mult				
	remove_modifier = iep_basic_ship_shield_damage_mult				
	remove_modifier = iep_basic_ship_hull_damage_mult				
	remove_modifier = iep_basic_ship_tracking_mult					
	remove_modifier = iep_basic_ship_weapon_damage						
	remove_modifier = iep_basic_ship_hull_regen_add_perc			
	remove_modifier = iep_basic_ship_armor_regen_add_perc			
	remove_modifier = iep_basic_ship_shield_regen_add_perc				
	remove_modifier = iep_basic_ship_hull_mult						
	remove_modifier = iep_basic_ship_armor_mult						
	remove_modifier = iep_basic_ship_shield_mult							
	remove_modifier = iep_basic_ship_shield_reduction					
	remove_modifier = iep_basic_ship_armor_reduction						
	remove_modifier = iep_basic_ship_accuracy_mult							
	remove_modifier = iep_basic_ship_weapon_range_mult						
	remove_modifier = iep_basic_ship_fire_rate_mult							
	remove_modifier = iep_basic_weapon_type_energy_weapon_damage_mult		
	remove_modifier = iep_basic_weapon_type_explosive_weapon_damage_mult	
	remove_modifier = iep_basic_weapon_type_kinetic_weapon_damage_mult	
	remove_modifier = iep_basic_ship_tracking_add							
	remove_modifier = iep_basic_ship_accuracy_add							
	remove_modifier = iep_basic_ship_armor_add								
	remove_modifier = iep_basic_ship_shield_add
	remove_modifier = increase_hp_t5_times
	remove_modifier = increase_hp_t4_times
	remove_modifier = increase_hp_t3_times
	remove_modifier = increase_hp_t2_times
	remove_modifier = increase_hp_t1_times
	remove_modifier = increase_hp_5000000_times
	remove_modifier = increase_hp_4000000_times
	remove_modifier = increase_hp_3000000_times
	remove_modifier = increase_hp_2000000_times
	remove_modifier = increase_hp_1000000_times
}

# initial = 0  min = 0.25  small = 0.5  medium = 0.75  max = 0.99  origin = 1
# double = 2  fifth = 5  Tenth = 10  One_of_fourth = 25  One_of_double = 50  hundred = 100  million = 1000000  dmillion = 2000000
set_ban_eternal_fleet_mult_modifier = {
	optimize_memory
	########MULT VALUE########
	#scope: fromfromfrom
	[[shield_penetration] set_eternal_fleet_standard_modifier = { paramater = $shield_penetration$ UNIT = origin }]  
	[[armor_penetration] set_eternal_fleet_standard_modifier = { paramater = $armor_penetration$ UNIT = origin }] 
	[[hull_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $hull_regen_add_perc_standard$ UNIT = origin }]
	[[armor_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $armor_regen_add_perc_standard$ UNIT = origin }]
	[[shield_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $shield_regen_add_perc_standard$ UNIT = origin }] 

	[[armor_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $armor_damage$ UNIT = origin UNIT1 = max }]  
	[[shield_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $shield_damage$ UNIT = origin UNIT1 = max }]  
	[[hull_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $hull_damage$ UNIT = origin UNIT1 = max }]  
	[[weapon_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $weapon_damage$ UNIT = origin UNIT1 = max }]  

	[[tracking] set_eternal_fleet_insane_damage_modifier = { paramater = $tracking$ UNIT = origin UNIT1 = initial }]  
	[[accuracy] set_eternal_fleet_insane_damage_modifier = { paramater = $accuracy$ UNIT = origin UNIT1 = initial }]  
	
	#scope: fromfrom
	[[shield_penetration_own] set_eternal_fleet_protection_modifier = { paramater = $shield_penetration_own$ relation = "<" UNIT = initial }]  
	[[armor_penetration_own] set_eternal_fleet_protection_modifier = { paramater = $armor_penetration_own$ relation = "<" UNIT = initial }]  
	[[weapon_damage_own] set_eternal_fleet_protection_modifier = { paramater = $weapon_damage_own$ relation = "<" UNIT = initial }]  
	[[hull_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $hull_regen_add_perc$ relation = "<" UNIT = initial }]  
	[[armor_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $armor_regen_add_perc$ relation = "<" UNIT = initial }]  
	[[shield_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $shield_regen_add_perc$ relation = "<" UNIT = initial }]  
	[[hull_mult] set_eternal_fleet_protection_modifier = { paramater = $hull_mult$ relation = "<" UNIT = initial }]  
	[[armor_mult] set_eternal_fleet_protection_modifier = { paramater = $armor_mult$ relation = "<" UNIT = initial }]  
	[[shield_mult] set_eternal_fleet_protection_modifier = { paramater = $shield_mult$ relation = "<" UNIT = initial }]  
	[[weapon_range_mult] set_eternal_fleet_protection_modifier = { paramater = $weapon_range_mult$ relation = "<" UNIT = initial }]  
	[[fire_rate_mult] set_eternal_fleet_protection_modifier = { paramater = $fire_rate_mult$ relation = "<" UNIT = initial }]  
	[[tracking_own] set_eternal_fleet_protection_modifier = { paramater = $tracking_own$ relation = "<" UNIT = initial }]  
	[[accuracy_own] set_eternal_fleet_protection_modifier = { paramater = $accuracy_own$ relation = "<" UNIT = initial }]  
	[[weapon_type_energy] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_energy$ relation = "<" UNIT = initial }]  
	[[weapon_type_kinetic] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_kinetic$ relation = "<" UNIT = initial }]  
	[[weapon_type_explosive] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_explosive$ relation = "<" UNIT = initial }]  
	[[armor_damage_own] set_eternal_fleet_protection_modifier = { paramater = $armor_damage_own$ relation = "<" UNIT = initial }]  
	[[shield_damage_own] set_eternal_fleet_protection_modifier = { paramater = $shield_damage_own$ relation = "<" UNIT = initial }]  
	[[hull_damage_own] set_eternal_fleet_protection_modifier = { paramater = $hull_damage_own$ relation = "<" UNIT = initial }]  
	
	[[shield_reduction] set_eternal_fleet_protection_modifier = { paramater = $shield_reduction$ relation = ">" UNIT = initial }]  
	[[armor_reduction] set_eternal_fleet_protection_modifier = { paramater = $armor_reduction$ relation = ">" UNIT = initial }]  

	#######ADD VALUE#########
	[[tracking_add_own] set_eternal_fleet_protection_modifier = { paramater = $tracking_add_own$ relation = "<" UNIT = hundred }]  
	[[accuracy_add_own] set_eternal_fleet_protection_modifier = { paramater = $accuracy_add_own$ relation = "<" UNIT = hundred }] 

	[[shield_add] set_eternal_fleet_protection_modifier = { paramater = $shield_add$ relation = "<" UNIT = million }]  
	[[armor_add] set_eternal_fleet_protection_modifier = { paramater = $armor_add$ relation = "<" UNIT = million }]  
}

# initial = 0  min = 0.25  small = 0.5  medium = 0.75  max = 0.99  origin = 1
# double = 2  fifth = 5  Tenth = 10  One_of_fourth = 25  One_of_double = 50  hundred = 100  million = 1000000  dmillion = 2000000
set_easy_eternal_fleet_mult_modifier = {
	optimize_memory
	########MULT VALUE########
	#scope: fromfromfrom
	[[shield_penetration] set_eternal_fleet_standard_modifier = { paramater = $shield_penetration$ UNIT = origin }]  
	[[armor_penetration] set_eternal_fleet_standard_modifier = { paramater = $armor_penetration$ UNIT = origin }]  
	[[hull_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $hull_regen_add_perc_standard$ UNIT = origin }]
	[[armor_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $armor_regen_add_perc_standard$ UNIT = origin }]
	[[shield_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $shield_regen_add_perc_standard$ UNIT = origin }] 

	[[armor_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $armor_damage$ UNIT = origin UNIT1 = min }]  
	[[shield_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $shield_damage$ UNIT = origin UNIT1 = min }]  
	[[hull_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $hull_damage$ UNIT = origin UNIT1 = min }]  
	[[weapon_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $weapon_damage$ UNIT = origin UNIT1 = min }]  

	[[tracking] set_eternal_fleet_insane_damage_modifier = { paramater = $tracking$ UNIT = origin UNIT1 = initial }]  
	[[accuracy] set_eternal_fleet_insane_damage_modifier = { paramater = $accuracy$ UNIT = origin UNIT1 = initial }]  

	#scope: fromfrom
	[[shield_penetration_own] set_eternal_fleet_protection_modifier = { paramater = $shield_penetration_own$ relation = "<" UNIT = min }]  
	[[armor_penetration_own] set_eternal_fleet_protection_modifier = { paramater = $armor_penetration_own$ relation = "<" UNIT = min }]  
	[[weapon_damage_own] set_eternal_fleet_protection_modifier = { paramater = $weapon_damage_own$ relation = "<" UNIT = min }]  
	[[hull_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $hull_regen_add_perc$ relation = "<" UNIT = min }]  
	[[armor_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $armor_regen_add_perc$ relation = "<" UNIT = min }]  
	[[shield_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $shield_regen_add_perc$ relation = "<" UNIT = min }]  
	[[hull_mult] set_eternal_fleet_protection_modifier = { paramater = $hull_mult$ relation = "<" UNIT = min }]  
	[[armor_mult] set_eternal_fleet_protection_modifier = { paramater = $armor_mult$ relation = "<" UNIT = min }]  
	[[shield_mult] set_eternal_fleet_protection_modifier = { paramater = $shield_mult$ relation = "<" UNIT = min }]  
	[[weapon_range_mult] set_eternal_fleet_protection_modifier = { paramater = $weapon_range_mult$ relation = "<" UNIT = min }]  
	[[fire_rate_mult] set_eternal_fleet_protection_modifier = { paramater = $fire_rate_mult$ relation = "<" UNIT = min }]  
	[[tracking_own] set_eternal_fleet_protection_modifier = { paramater = $tracking_own$ relation = "<" UNIT = min }]  
	[[accuracy_own] set_eternal_fleet_protection_modifier = { paramater = $accuracy_own$ relation = "<" UNIT = min }]  
	[[weapon_type_energy] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_energy$ relation = "<" UNIT = min }]  
	[[weapon_type_kinetic] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_kinetic$ relation = "<" UNIT = min }]  
	[[weapon_type_explosive] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_explosive$ relation = "<" UNIT = min }]  
	[[armor_damage_own] set_eternal_fleet_protection_modifier = { paramater = $armor_damage_own$ relation = "<" UNIT = min }]  
	[[shield_damage_own] set_eternal_fleet_protection_modifier = { paramater = $shield_damage_own$ relation = "<" UNIT = min }]  
	[[hull_damage_own] set_eternal_fleet_protection_modifier = { paramater = $hull_damage_own$ relation = "<" UNIT = min }]  

	[[shield_reduction] set_eternal_fleet_protection_modifier = { paramater = $shield_reduction$ relation = ">" UNIT = initial }]  
	[[armor_reduction] set_eternal_fleet_protection_modifier = { paramater = $armor_reduction$ relation = ">" UNIT = initial }]  

	#######ADD VALUE#########
	[[tracking_add_own] set_eternal_fleet_protection_modifier = { paramater = $tracking_add_own$ relation = "<" UNIT = One_of_fourth }]  
	[[accuracy_add_own] set_eternal_fleet_protection_modifier = { paramater = $accuracy_add_own$ relation = "<" UNIT = One_of_fourth }]  

	[[shield_add] set_eternal_fleet_protection_modifier = { paramater = $shield_add$ relation = "<" UNIT = million }]  
	[[armor_add] set_eternal_fleet_protection_modifier = { paramater = $armor_add$ relation = "<" UNIT = million }]  
}

# initial = 0  min = 0.25  small = 0.5  medium = 0.75  max = 0.99  origin = 1
# double = 2  fifth = 5  Tenth = 10  One_of_fourth = 25  One_of_double = 50  hundred = 100  million = 1000000  dmillion = 2000000
set_normal_eternal_fleet_mult_modifier = {
	optimize_memory
	########MULT VALUE########
	#scope: fromfromfrom
	[[shield_penetration] set_eternal_fleet_standard_modifier = { paramater = $shield_penetration$ UNIT = origin }]  
	[[armor_penetration] set_eternal_fleet_standard_modifier = { paramater = $armor_penetration$ UNIT = origin }]  
	[[hull_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $hull_regen_add_perc_standard$ UNIT = origin }]
	[[armor_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $armor_regen_add_perc_standard$ UNIT = origin }]
	[[shield_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $shield_regen_add_perc_standard$ UNIT = origin }] 

	[[armor_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $armor_damage$ UNIT = origin UNIT1 = small }]  
	[[shield_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $shield_damage$ UNIT = origin UNIT1 = small }]  
	[[hull_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $hull_damage$ UNIT = origin UNIT1 = small }]  
	[[weapon_damage] set_eternal_fleet_insane_damage_modifier = { paramater = $weapon_damage$ UNIT = origin UNIT1 = small }]  

	[[tracking] set_eternal_fleet_insane_damage_modifier = { paramater = $tracking$ UNIT = origin UNIT1 = initial }]  
	[[accuracy] set_eternal_fleet_insane_damage_modifier = { paramater = $accuracy$ UNIT = origin UNIT1 = initial }]  

	#scope: fromfrom
	[[shield_penetration_own] set_eternal_fleet_protection_modifier = { paramater = $shield_penetration_own$ relation = "<" UNIT = small }]  
	[[armor_penetration_own] set_eternal_fleet_protection_modifier = { paramater = $armor_penetration_own$ relation = "<" UNIT = small }]  
	[[weapon_damage_own] set_eternal_fleet_protection_modifier = { paramater = $weapon_damage_own$ relation = "<" UNIT = small }]  
	[[hull_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $hull_regen_add_perc$ relation = "<" UNIT = small }]  
	[[armor_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $armor_regen_add_perc$ relation = "<" UNIT = small }]  
	[[shield_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $shield_regen_add_perc$ relation = "<" UNIT = small }]  
	[[hull_mult] set_eternal_fleet_protection_modifier = { paramater = $hull_mult$ relation = "<" UNIT = small }]  
	[[armor_mult] set_eternal_fleet_protection_modifier = { paramater = $armor_mult$ relation = "<" UNIT = small }]  
	[[shield_mult] set_eternal_fleet_protection_modifier = { paramater = $shield_mult$ relation = "<" UNIT = small }]  
	[[weapon_range_mult] set_eternal_fleet_protection_modifier = { paramater = $weapon_range_mult$ relation = "<" UNIT = small }]  
	[[fire_rate_mult] set_eternal_fleet_protection_modifier = { paramater = $fire_rate_mult$ relation = "<" UNIT = small }]  
	[[tracking_own] set_eternal_fleet_protection_modifier = { paramater = $tracking_own$ relation = "<" UNIT = small }]  
	[[accuracy_own] set_eternal_fleet_protection_modifier = { paramater = $accuracy_own$ relation = "<" UNIT = small }]  
	[[weapon_type_energy] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_energy$ relation = "<" UNIT = small }]  
	[[weapon_type_kinetic] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_kinetic$ relation = "<" UNIT = small }]  
	[[weapon_type_explosive] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_explosive$ relation = "<" UNIT = small }]  
	[[armor_damage_own] set_eternal_fleet_protection_modifier = { paramater = $armor_damage_own$ relation = "<" UNIT = small }]  
	[[shield_damage_own] set_eternal_fleet_protection_modifier = { paramater = $shield_damage_own$ relation = "<" UNIT = small }]  
	[[hull_damage_own] set_eternal_fleet_protection_modifier = { paramater = $hull_damage_own$ relation = "<" UNIT = small }]  

	[[shield_reduction] set_eternal_fleet_protection_modifier = { paramater = $shield_reduction$ relation = ">" UNIT = initial }]  
	[[armor_reduction] set_eternal_fleet_protection_modifier = { paramater = $armor_reduction$ relation = ">" UNIT = initial }]  

	#######ADD VALUE#########
	[[tracking_add_own] set_eternal_fleet_protection_modifier = { paramater = $tracking_add_own$ relation = "<" UNIT = One_of_double }]  
	[[accuracy_add_own] set_eternal_fleet_protection_modifier = { paramater = $accuracy_add_own$ relation = "<" UNIT = One_of_double }]  

	[[shield_add] set_eternal_fleet_protection_modifier = { paramater = $shield_add$ relation = "<" UNIT = million }]  
	[[armor_add] set_eternal_fleet_protection_modifier = { paramater = $armor_add$ relation = "<" UNIT = million }]  
}
 
# initial = 0  min = 0.25  small = 0.5  medium = 0.75  max = 0.99  origin = 1
# double = 2  fifth = 5  Tenth = 10  One_of_fourth = 25  One_of_double = 50  hundred = 100  million = 1000000  dmillion = 2000000
set_difiicult_eternal_fleet_mult_modifier = {
	optimize_memory
	########MULT VALUE########
	#scope: fromfromfrom
	[[shield_penetration] set_eternal_fleet_standard_modifier = { paramater = $shield_penetration$ UNIT = origin }]  
	[[armor_penetration] set_eternal_fleet_standard_modifier = { paramater = $armor_penetration$ UNIT = origin }]  
	[[hull_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $hull_regen_add_perc_standard$ UNIT = origin }]
	[[armor_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $armor_regen_add_perc_standard$ UNIT = origin }]
	[[shield_regen_add_perc_standard] set_eternal_fleet_standard_modifier = { paramater = $shield_regen_add_perc_standard$ UNIT = origin }] 

	[[armor_damage] set_eternal_fleet_damage_modifier = { paramater = $armor_damage$ UNIT = origin UNIT1 = medium }]  
	[[shield_damage] set_eternal_fleet_damage_modifier = { paramater = $shield_damage$ UNIT = origin UNIT1 = medium }]  
	[[hull_damage] set_eternal_fleet_damage_modifier = { paramater = $hull_damage$ UNIT = origin UNIT1 = medium }]  
	[[weapon_damage] set_eternal_fleet_damage_modifier = { paramater = $weapon_damage$ UNIT = origin UNIT1 = medium }]  

	[[tracking] set_eternal_fleet_damage_modifier = { paramater = $tracking$ UNIT = origin UNIT1 = initial }]  
	[[accuracy] set_eternal_fleet_damage_modifier = { paramater = $accuracy$ UNIT = origin UNIT1 = initial }]  

	#scope: fromfrom
	[[shield_penetration_own] set_eternal_fleet_protection_modifier = { paramater = $shield_penetration_own$ relation = "<" UNIT = origin }]  
	[[armor_penetration_own] set_eternal_fleet_protection_modifier = { paramater = $armor_penetration_own$ relation = "<" UNIT = origin }]  
	[[weapon_damage_own] set_eternal_fleet_protection_modifier = { paramater = $weapon_damage_own$ relation = "<" UNIT = origin }]  
	[[hull_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $hull_regen_add_perc$ relation = "<" UNIT = origin }]  
	[[armor_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $armor_regen_add_perc$ relation = "<" UNIT = origin }]  
	[[shield_regen_add_perc] set_eternal_fleet_protection_modifier = { paramater = $shield_regen_add_perc$ relation = "<" UNIT = origin }]  
	[[hull_mult] set_eternal_fleet_protection_modifier = { paramater = $hull_mult$ relation = "<" UNIT = origin }]  
	[[armor_mult] set_eternal_fleet_protection_modifier = { paramater = $armor_mult$ relation = "<" UNIT = origin }]  
	[[shield_mult] set_eternal_fleet_protection_modifier = { paramater = $shield_mult$ relation = "<" UNIT = origin }]  
	[[weapon_range_mult] set_eternal_fleet_protection_modifier = { paramater = $weapon_range_mult$ relation = "<" UNIT = origin }]  
	[[fire_rate_mult] set_eternal_fleet_protection_modifier = { paramater = $fire_rate_mult$ relation = "<" UNIT = origin }]  
	[[tracking_own] set_eternal_fleet_protection_modifier = { paramater = $tracking_own$ relation = "<" UNIT = origin }]  
	[[accuracy_own] set_eternal_fleet_protection_modifier = { paramater = $accuracy_own$ relation = "<" UNIT = origin }]  
	[[weapon_type_energy] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_energy$ relation = "<" UNIT = origin }]  
	[[weapon_type_kinetic] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_kinetic$ relation = "<" UNIT = origin }]  
	[[weapon_type_explosive] set_eternal_fleet_protection_modifier = { paramater = $weapon_type_explosive$ relation = "<" UNIT = origin }]  
	[[armor_damage_own] set_eternal_fleet_protection_modifier = { paramater = $armor_damage_own$ relation = "<" UNIT = origin }]  
	[[shield_damage_own] set_eternal_fleet_protection_modifier = { paramater = $shield_damage_own$ relation = "<" UNIT = origin }]  
	[[hull_damage_own] set_eternal_fleet_protection_modifier = { paramater = $hull_damage_own$ relation = "<" UNIT = origin }]  

	[[shield_reduction] set_eternal_fleet_protection_modifier = { paramater = $shield_reduction$ relation = ">" UNIT = initial }]  
	[[armor_reduction] set_eternal_fleet_protection_modifier = { paramater = $armor_reduction$ relation = ">" UNIT = initial }]  

	#######ADD VALUE#########
	[[tracking_add_own] set_eternal_fleet_protection_modifier = { paramater = $tracking_add_own$ relation = "<" UNIT = hundred }]  
	[[accuracy_add_own] set_eternal_fleet_protection_modifier = { paramater = $accuracy_add_own$ relation = "<" UNIT = hundred }]  

	[[shield_add] set_eternal_fleet_protection_modifier = { paramater = $shield_add$ relation = "<" UNIT = million }]  
	[[armor_add] set_eternal_fleet_protection_modifier = { paramater = $armor_add$ relation = "<" UNIT = million }]  
}

# tip:script scope available in penetration modifier, other will be error.
# parameter： modifier  
# UNIT：Non flagship value  
set_eternal_fleet_standard_modifier = {
	optimize_memory
	if = { 
		limit = { 
			NOT = { has_ship_flag = fire_ship_var } 
			NOT = { check_modifier_value = { modifier = $paramater$ value = @mult_modifer_mult_$UNIT$_value } }
		}
		export_modifier_to_variable = { modifier = $paramater$ variable = $paramater$_value }
		change_variable = { which = $paramater$_value value = @modifer_mult_$UNIT$_value }
		set_invasion_fleet_basic_modifier = { SUB = basic_$paramater$ FACTOR = $paramater$_value }
		if = { limit = { is_variable_set = $paramater$_value } clear_variable = $paramater$_value }
	} 
	else_if = { 
		limit = { 
			has_ship_flag = fire_ship_var  
			NOT = { check_modifier_value = { modifier = $paramater$ value = @mult_modifer_mult_$UNIT$_value } }
		}
		export_modifier_to_variable = { modifier = $paramater$ variable = change_$paramater$_value }
		change_variable = { which = change_$paramater$_value value = @modifer_mult_$UNIT$_value }
		set_invasion_fleet_basic_modifier = { SUB = change_basic_$paramater$ FACTOR = change_$paramater$_value }
		if = { limit = { is_variable_set = change_$paramater$_value } clear_variable = change_$paramater$_value }
	}
}

# tip:script scope available in armor/shield/powerpoint modifier, other will be error.
# parameter： modifier  
# UNIT：Non flagship value  
# UNIT1：flagship value
set_eternal_fleet_damage_modifier = {
	optimize_memory
	if = {
		limit = { 
			NOT = { has_ship_flag = fire_ship_var } 
			check_modifier_value = { modifier = $paramater$ value > @mult_modifer_mult_$UNIT$_value } 
		}
		export_modifier_to_variable = { modifier = $paramater$ variable = $paramater$_value }
		change_variable = { which = $paramater$_value value = @modifer_mult_$UNIT$_value }
		set_invasion_fleet_basic_modifier = { SUB = basic_$paramater$ FACTOR = $paramater$_value }
		if = { limit = { is_variable_set = $paramater$_value } clear_variable = $paramater$_value }
	} 
	else_if = { 
		limit = { has_ship_flag = fire_ship_var }
		if = {
			limit = { 
				fleet = { has_enable_flag_ship_system_true = yes } 
				NOT = { check_modifier_value = { modifier = $paramater$ value = @mult_modifer_mult_$UNIT1$_value } }
			}
			export_modifier_to_variable = { modifier = $paramater$ variable = change_$paramater$_value }
			change_variable = { which = change_$paramater$_value value = @modifer_mult_$UNIT1$_value }
			set_invasion_fleet_basic_modifier = { SUB = change_basic_$paramater$ FACTOR = change_$paramater$_value }
		}
		else_if = {
			limit = { 
				fleet = { has_enable_flag_ship_system_true = no } 
				NOT = { check_modifier_value = { modifier = $paramater$ value = @mult_modifer_mult_$UNIT$_value } }
			}
			export_modifier_to_variable = { modifier = $paramater$ variable = change_$paramater$_value }
			change_variable = { which = change_$paramater$_value value = @modifer_mult_$UNIT$_value }
			set_invasion_fleet_basic_modifier = { SUB = change_basic_$paramater$ FACTOR = change_$paramater$_value }
		}
		if = { limit = { is_variable_set = change_$paramater$_value } clear_variable = change_$paramater$_value }
	}
}

# tip:script scope available in insane eternal damage system
# parameter： the modifier  
# UNIT：Non flagship value  
# UNIT1：flagship value
# relation： < > or = 
set_eternal_fleet_insane_damage_modifier = {
	optimize_memory
	if = {
		limit = { 
			NOT = { has_ship_flag = fire_ship_var } 
			check_modifier_value = { modifier = $paramater$ value > @mult_modifer_mult_$UNIT$_value }
		}
		export_modifier_to_variable = { modifier = $paramater$ variable = $paramater$_value }
		change_variable = { which = $paramater$_value value = @modifer_mult_$UNIT$_value }
		set_invasion_fleet_basic_modifier = { SUB = basic_$paramater$ FACTOR = $paramater$_value }
		if = { limit = { is_variable_set = $paramater$_value } clear_variable = $paramater$_value }
	} 
	else_if = { 
		limit = { 
			has_ship_flag = fire_ship_var 
			NOT = { check_modifier_value = { modifier = $paramater$ value = @mult_modifer_mult_$UNIT1$_value } }
		}
		export_modifier_to_variable = { modifier = $paramater$ variable = change_$paramater$_value }
		change_variable = { which = change_$paramater$_value value = @modifer_mult_$UNIT1$_value }
		set_invasion_fleet_basic_modifier = { SUB = change_basic_$paramater$ FACTOR = change_$paramater$_value }
		if = { limit = { is_variable_set = change_$paramater$_value } clear_variable = change_$paramater$_value }
	}
}

# tip:script scope available in all modifier about protecting ship
# parameter： the modifier  
# UNIT：Non flagship value  
# relation： < > or = 
set_eternal_fleet_protection_modifier = {
	optimize_memory
	if = {
		limit = { 
			NOT = { has_ship_flag = fire_ship_var } 
			check_modifier_value = { modifier = $paramater$ value $relation$ @modifer_mult_$UNIT$_value }
		}
		export_modifier_to_variable = { modifier = $paramater$ variable = $paramater$_value }
		subtract_variable = { which = $paramater$_value value = @modifer_mult_$UNIT$_value }
		set_invasion_fleet_basic_modifier = { SUB = basic_$paramater$ FACTOR = $paramater$_value }
		if = { limit = { is_variable_set = $paramater$_value } clear_variable = $paramater$_value }
	} 
	else_if = { 
		limit = { 
			has_ship_flag = fire_ship_var 
			check_modifier_value = { modifier = $paramater$ value $relation$ @modifer_mult_$UNIT$_value }
		}
		export_modifier_to_variable = { modifier = $paramater$ variable = change_$paramater$_value }
		subtract_variable = { which = change_$paramater$_value value = @modifer_mult_$UNIT$_value }
		set_invasion_fleet_basic_modifier = { SUB = change_basic_$paramater$ FACTOR = change_$paramater$_value }
		if = { limit = { is_variable_set = change_$paramater$_value } clear_variable = change_$paramater$_value }
	}
}

# base modifier script
set_invasion_fleet_basic_modifier = { 
	optimize_memory
	add_modifier = { modifier = $SUB$ multiplier = $FACTOR$ days = $DAYS|-1$ } 
}

# reset all variable
# remove_eternal_fleet_mult_variable = {
# 	[[hull_regen_add_perc] clear_variable = $hull_regen_add_perc$_value clear_variable = change_$hull_regen_add_perc$_value ]
# 	[[armor_regen_add_perc] clear_variable = $armor_regen_add_perc$_value clear_variable = change_$armor_regen_add_perc$_value ]
# 	[[shield_regen_add_perc] clear_variable = $shield_regen_add_perc$_value clear_variable = change_$shield_regen_add_perc$_value ]
# 	[[hull_mult] clear_variable = $hull_mult$_value clear_variable = change_$hull_mult$_value ]
# 	[[armor_mult] clear_variable = $armor_mult$_value clear_variable = change_$armor_mult$_value ]
# 	[[shield_mult] clear_variable = $shield_mult$_value clear_variable = change_$shield_mult$_value ]
# 	[[shield_penetration] clear_variable = $shield_penetration$_value clear_variable = change_$shield_penetration$_value ]
# 	[[armor_penetration] clear_variable = $armor_penetration$_value clear_variable = change_$armor_penetration$_value ]
# 	[[shield_penetration_own] clear_variable = $shield_penetration_own$_value clear_variable = change_$shield_penetration_own$_value ]
# 	[[armor_penetration_own] clear_variable = $armor_penetration_own$_value clear_variable = change_$armor_penetration_own$_value ]
# 	[[armor_damage] clear_variable = $armor_damage$_value clear_variable = change_$armor_damage$_value ]
# 	[[shield_damage] clear_variable = $shield_damage$_value clear_variable = change_$shield_damage$_value ]
# 	[[hull_damage] clear_variable = $hull_damage$_value clear_variable = change_$hull_damage$_value ]
# 	[[armor_damage_own] clear_variable = $armor_damage_own$_value clear_variable = change_$armor_damage_own$_value ]
# 	[[shield_damage_own] clear_variable = $shield_damage_own$_value clear_variable = change_$shield_damage_own$_value ]
# 	[[hull_damage_own] clear_variable = $hull_damage_own$_value clear_variable = change_$hull_damage_own$_value ]
# 	[[weapon_type_energy] clear_variable = $weapon_type_energy$_value clear_variable = change_$weapon_type_energy$_value ]
# 	[[weapon_type_explosive] clear_variable = $weapon_type_explosive$_value clear_variable = change_$weapon_type_explosive$_value ]
# 	[[weapon_type_kinetic] clear_variable = $weapon_type_kinetic$_value clear_variable = change_$weapon_type_kinetic$_value ]
# 	[[weapon_damage] clear_variable = $weapon_damage$_value clear_variable = change_$weapon_damage$_value ]
# 	[[weapon_damage_own] clear_variable = $weapon_damage_own$_value clear_variable = change_$weapon_damage_own$_value ]
# 	[[weapon_range_mult] clear_variable = $weapon_range_mult$_value clear_variable = change_$weapon_range_mult$_value ]
# 	[[fire_rate_mult] clear_variable = $fire_rate_mult$_value clear_variable = change_$fire_rate_mult$_value ]
# 	[[tracking] clear_variable = $tracking$_value clear_variable = change_$tracking$_value ]
# 	[[accuracy] clear_variable = $accuracy$_value clear_variable = change_$accuracy$_value ]
# 	[[tracking_own] clear_variable = $tracking_own$_value clear_variable = change_$tracking_own$_value ]
# 	[[accuracy_own] clear_variable = $accuracy_own$_value clear_variable = change_$accuracy_own$_value ]
# 	[[tracking_add_own] clear_variable = $tracking_add_own$_value clear_variable = change_$tracking_add_own$_value ]
# 	[[accuracy_add_own] clear_variable = $accuracy_add_own$_value clear_variable = change_$accuracy_add_own$_value ]
# 	[[shield_add] clear_variable = $shield_add$_value clear_variable = change_$shield_add$_value ]
# 	[[armor_add] clear_variable = $armor_add$_value clear_variable = change_$armor_add$_value ]
# 	[[shield_reduction] clear_variable = $shield_reduction$_value clear_variable = change_$shield_reduction$_value ]
# 	[[armor_reduction] clear_variable = $armor_reduction$_value clear_variable = change_$armor_reduction$_value ]
# }

# reset all modifier
clear_battleship_modifier_fixed_ship = {
	optimize_memory
	remove_modifier = basic_ship_shield_penetration_mult				remove_modifier = change_basic_ship_shield_penetration_mult 
	remove_modifier = basic_ship_armor_penetration_mult					remove_modifier = change_basic_ship_armor_penetration_mult
	remove_modifier = basic_ship_armor_damage_mult						remove_modifier = change_basic_ship_armor_damage_mult
	remove_modifier = basic_ship_shield_damage_mult						remove_modifier = change_basic_ship_shield_damage_mult
	remove_modifier = basic_ship_hull_damage_mult						remove_modifier = change_basic_ship_hull_damage_mult
	remove_modifier = basic_ship_tracking_mult							remove_modifier = change_basic_ship_tracking_mult
	remove_modifier = basic_ship_weapon_damage							remove_modifier = change_basic_ship_weapon_damage
	remove_modifier = basic_ship_hull_regen_add_perc					remove_modifier = change_basic_ship_hull_regen_add_perc
	remove_modifier = basic_ship_armor_regen_add_perc					remove_modifier = change_basic_ship_armor_regen_add_perc
	remove_modifier = basic_ship_shield_regen_add_perc					remove_modifier = change_basic_ship_shield_regen_add_perc
	remove_modifier = basic_ship_hull_mult								remove_modifier = change_basic_ship_hull_mult
	remove_modifier = basic_ship_armor_mult								remove_modifier = change_basic_ship_armor_mult
	remove_modifier = basic_ship_shield_mult							remove_modifier = change_basic_ship_shield_mult
	remove_modifier = basic_ship_shield_reduction						remove_modifier = change_basic_ship_shield_reduction
	remove_modifier = basic_ship_armor_reduction						remove_modifier = change_basic_ship_armor_reduction
	remove_modifier = basic_ship_accuracy_mult							remove_modifier = change_basic_ship_accuracy_mult
	remove_modifier = basic_ship_weapon_range_mult						remove_modifier = change_basic_ship_weapon_range_mult
	remove_modifier = basic_ship_fire_rate_mult							remove_modifier = change_basic_ship_fire_rate_mult
	remove_modifier = basical_weapon_type_energy_weapon_damage_mult		remove_modifier = change_basical_weapon_type_energy_weapon_damage_mult
	remove_modifier = basical_weapon_type_explosive_weapon_damage_mult	remove_modifier = change_basical_weapon_type_explosive_weapon_damage_mult
	remove_modifier = basical_weapon_type_kinetic_weapon_damage_mult	remove_modifier = change_basical_weapon_type_kinetic_weapon_damage_mult
	remove_modifier = basic_ship_tracking_add							remove_modifier = change_basic_ship_tracking_add
	remove_modifier = basic_ship_accuracy_add							remove_modifier = change_basic_ship_accuracy_add
	remove_modifier = basic_ship_armor_add								remove_modifier = change_basic_ship_armor_add
	remove_modifier = basic_ship_shield_add								remove_modifier = change_basic_ship_shield_add
	fleet = { remove_fleet_flag = eternal_learned_leader } 				remove_ship_flag = fire_ship_var remove_ship_flag = is_modifiering
}

set_fleet_modifier = {
	optimize_memory
	add_modifier = { modifier = $SUB$ days = $DAYS|-1$ }
	change_variable = { which = $SUB$_var value = 1 }
}

kuat_reduce_hp_percent = {
	optimize_memory
	export_trigger_value_to_variable = { trigger = has_hp variable = exist_hp_value }
	multiply_variable = { which = exist_hp_value value = 0.01 }
	multiply_variable = { which = exist_hp_value value = $value$ }
	reduce_hp = exist_hp_value clear_variable = exist_hp_value
}

kuat_set_epsilon_obelisk_code = {
	optimize_memory
	random_list = {
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_0 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 0 } } }
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_1 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 1 } } }
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_2 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 2 } } }
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_3 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 3 } } }
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_4 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 4 } } }
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_5 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 5 } } }
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_6 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 6 } } }
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_7 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 7 } } }
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_8 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 8 } } }
		10 = { set_planet_flag = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$_9 event_target:global_event_country = { set_variable = { which = kuat_epsilon_obelisk_$ag_obelisk_seq$_$ag_position$ value = 9 } } }
	}
}

kuat_upgrade_epsilon_obelisk = {
	optimize_memory
	if = {
		limit = { exists = owner }
		owner = { save_event_target_as = kuat_target_megastructure_owner }
		switch = {
			trigger = has_megastructure_flag
			kuat_epsilon_obelisk_1 = { solar_system = {
				spawn_megastructure = {
					type = kuat_epsilon_obelisk_$ag_target_level$
					coords_from = prev
					owner = event_target:kuat_target_megastructure_owner
					init_effect = { set_megastructure_flag = kuat_epsilon_obelisk_1 }
				}
			} }
			kuat_epsilon_obelisk_2 = { solar_system = {
				spawn_megastructure = {
					type = kuat_epsilon_obelisk_$ag_target_level$
					coords_from = prev
					owner = event_target:kuat_target_megastructure_owner
					init_effect = { set_megastructure_flag = kuat_epsilon_obelisk_2 }
				}
			} }
			kuat_epsilon_obelisk_3 = { solar_system = {
				spawn_megastructure = {
					type = kuat_epsilon_obelisk_$ag_target_level$
					coords_from = prev
					owner = event_target:kuat_target_megastructure_owner
					init_effect = { set_megastructure_flag = kuat_epsilon_obelisk_3 }
				}
			} }
		}
	}
	else = {
		switch = {
			trigger = has_megastructure_flag
			kuat_epsilon_obelisk_1 = { solar_system = {
				spawn_megastructure = {
					type = kuat_epsilon_obelisk_$ag_target_level$
					coords_from = prev
					init_effect = { set_megastructure_flag = kuat_epsilon_obelisk_1 }
				}
			} }
			kuat_epsilon_obelisk_2 = { solar_system = {
				spawn_megastructure = {
					type = kuat_epsilon_obelisk_$ag_target_level$
					coords_from = prev
					init_effect = { set_megastructure_flag = kuat_epsilon_obelisk_2 }
				}
			} }
			kuat_epsilon_obelisk_3 = { solar_system = {
				spawn_megastructure = {
					type = kuat_epsilon_obelisk_$ag_target_level$
					coords_from = prev
					init_effect = { set_megastructure_flag = kuat_epsilon_obelisk_3 }
				}
			} }
		}
	}
	remove_megastructure = this
}

#fromfromfrom: enemy fleet
#fromfrom: eternal fleet
kuat_copy_leader_learning_system = {
	optimize_memory
	if = {
		limit = { 
			fromfromfrom = { NOT = { has_fleet_flag = eternal_learned_leader } } 
			from = { is_ai = no }
		}
		fromfromfrom = {
			random_list = {
				1 = { if = {
					limit = { 
						exists = leader 
						leader = { NOT = { has_leader_flag = eternal_learned_leader } }
					}
					set_fleet_flag = eternal_learned_leader
					leader = { set_timed_leader_flag = { flag = eternal_learned_leader days = 180 } }
					root = {
						clone_leader = {
							class = admiral
							target = prev.leader
							effect = { save_event_target_as = eternal_learned_leader_copy }
						}
						fromfrom = {
							if = {
								limit = { NOT = { has_fleet_flag = have_learned_leader } }
								if = {
									limit = { exists = leader }
									leader = { kill_leader = { show_notification = no } }
								}
								assign_leader = event_target:eternal_learned_leader_copy
								set_timed_fleet_flag = { flag = have_learned_leader days = 180 }
							}
							else = { owner = { 
								random_controlled_fleet = {
									limit = { NOT = { has_fleet_flag = have_learned_leader } }
									if = {
										limit = { exists = leader }
										leader = { kill_leader = { show_notification = no } }
									}
									assign_leader = event_target:eternal_learned_leader_copy
									set_timed_fleet_flag = { flag = have_learned_leader days = 180 }
								}
							} }
						}
						from = { country_event = { id = exe_invasion.141 } }
					} }
					else = { every_controlled_ship = { if = { 
						limit = { check_modifier_value = { modifier = ship_hull_mult value > 4 } } 
						clear_ship_modifier = { modifier = ship_hull_mult subtract = 4 DAYS = -1 } 
					} } }
				}
				1 = { every_controlled_ship = { if = { 
					limit = { check_modifier_value = { modifier = ship_hull_mult value > 4 } } 
					clear_ship_modifier = { modifier = ship_hull_mult subtract = 4 DAYS = -1 } 
				} } }
			}
			reroll_random = yes
		}
	}
}