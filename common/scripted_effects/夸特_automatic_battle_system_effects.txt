set_automatic_fleet_avaliable = {
	optimize_memory
	set_fleet_flag = kuat_auto_fleet_system
	[[TYPE] fleet_execute_order_$TYPE$ = { FRIENDLY_TARGET = $FRIENDLY_TARGET$ }]
}

remove_automatic_fleet_avaliable = {
	optimize_memory
	clear_orders = yes clear_fleet_actions = this
	remove_fleet_flag = kuat_auto_fleet_system
}


# $FRIENDLY_TARGET$ is root
fleet_execute_order_transport_automatic_action = {
	optimize_memory
	queue_actions = { repeat = { find_closest_system = {
		trigger = {
			id = transport_automatic_action.0.find_closest_system
			any_system_planet = {
				exists = controller 
				controller = { is_at_war_with = $FRIENDLY_TARGET$ } 
				any_fleet_in_orbit = { exists = controller controller = { is_same_value = $FRIENDLY_TARGET$ } }
			}
		}
		found_system = { 
			effect = {
				id = transport_automatic_action.0.found_system
				ROOT = { 
					set_location = { target = prev.star distance = 300 angle = random } 
					every_owned_ship = { kuat_create_jump_particle_effect = yes }
				}
			} 
			find_closest_planet = {
				trigger = {
					id = transport_automatic_action.0.find_closest_planet
					exists = controller controller = { is_at_war_with = $FRIENDLY_TARGET$ }
					any_fleet_in_orbit = { exists = controller controller = { is_same_value = $FRIENDLY_TARGET$ } }
				}
				found_planet = { 
					orbit_planet = this 
					effect = {
						id = transport_automatic_action.0.found_planet
						Root = { set_fleet_stance = aggressive }
					}
					wait = { duration = 75 random = 25 } 
				}
			}
		}
		failed = { wait = 75 effect = { 
			id = colossus_automatic_action.99.ftl 
			if = { limit = { controller = { NOT = { is_at_war_with = $FRIENDLY_TARGET$ } } } ROOT = { remove_automatic_fleet_avaliable = yes } }
		} }
	} } }
}

fleet_execute_order_colossus_automatic_action = {
	optimize_memory
	queue_actions = { repeat = { find_closest_system = {
		trigger = {
			id = colossus_automatic_action.0.find_closest_system
			any_system_planet = {
				exists = controller
				controller = { is_at_war_with = $FRIENDLY_TARGET$ }
				any_fleet_in_orbit = { exists = controller controller = { is_same_value = $FRIENDLY_TARGET$ } }
			}
		}
		found_system = { 
			effect = {
				id = colossus_automatic_action.0.found_system
				ROOT = { 
					set_location = { target = prev.star distance = 300 angle = random } 
					every_owned_ship = { kuat_create_jump_particle_effect = yes }
				}
			} 
			find_closest_planet = {
				trigger = {
					id = colossus_automatic_action.0.find_closest_planet
					exists = controller controller = { is_at_war_with = $FRIENDLY_TARGET$ }
					any_fleet_in_orbit = { exists = controller controller = { is_same_value = $FRIENDLY_TARGET$ } }
				}
				found_planet = { destroy_planet = { target = this skip_rules = yes } }
			}
		}
		failed = { wait = 75 effect = { 
			id = colossus_automatic_action.99.ftl 
			if = { limit = { controller = { NOT = { is_at_war_with = $FRIENDLY_TARGET$ } } } ROOT = { remove_automatic_fleet_avaliable = yes } }
		} }
	} } } 
}

fleet_execute_order_millatry_automatic_action = {
	optimize_memory
	kuat_exe_auto_fleet_action = { TYPE = kuat_exe_auto OWNER = $FRIENDLY_TARGET$ }
}

fleet_execute_order_defender_automatic_action = {
	optimize_memory
	queue_actions = { repeat = { find_closest_system = {
		trigger = {
			id = defender_automatic_action.0.find_closest_system
			exists = owner
			owner = { is_same_value = $FRIENDLY_TARGET$ }
			any_fleet_in_system = {
				exists = owner
				owner = { is_hostile = $FRIENDLY_TARGET$ }
			}
		}
		found_system = { effect = {
			id = defender_automatic_action.1.found_system
			ROOT = {  if = {
				limit = { is_in_combat = no NOT = { has_fleet_flag = kuat_auto_defence_fleet_temple } }
				set_location = { target = prev.star distance = 300 angle = random }
				set_timed_fleet_flag = { flag = kuat_auto_defence_fleet_temple days = 30 }
			} }
			every_fleet_in_system = {
				limit = { exists = controller controller = { is_at_war_with = $FRIENDLY_TARGET$ } }
				set_cloaking_active = no
			}
		} }
		failed = { find_random_system = {
			trigger = {
				id = defender_automatic_action.1.find_random_system
				exists = owner
				NOT = { has_star_flag = petrol_system_temple }
				owner = { is_same_value = $FRIENDLY_TARGET$ }
			}
			found_system = { 
				move_to = this
				effect = {
					id = defender_automatic_action.1.found_system
					set_timed_star_flag = { flag = petrol_system_temple days = 1 }
				}
			}
			failed = { effect = { id = colossus_automatic_action.99.ftl ROOT = { remove_automatic_fleet_avaliable = yes } } }
		} }
	} } } 
}