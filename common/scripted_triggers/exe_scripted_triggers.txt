is_kuat_fallen_empire = {
	OR = {
		is_country_type = kuat_fallen_empire
		is_country_type = kuat_awakened_fallen_empire
		is_country_type = awakened_return_kuat_empire
		is_country_type = kuat_shipyard
		is_country_type = kuat_support
		is_country_type = kuat_fleet
		is_country_type = kuat_fleet_hostile
		is_country_type = kuat_fire_base
		is_country_type = kuat_fire_base_hositle
		is_country_type = ag_kae_ge_invasion_country
		is_country_type = ag_kae_e_area_guardian
	}
}

is_eternal_faction = {
	OR = {
		is_country_type = ag_kuat_invasion_country
		is_country_type = eternal_support
		is_country_type = eternal_support_guadian
	}
}

is_eternal_guardian = {
	OR = {
		is_country_type = eternal_support
		is_country_type = eternal_support_guadian
	}
}

is_eternal_crisis = {
	is_country_type = ag_kuat_invasion_country
}

is_infinite_faction = {
	is_country_type = Infinite_empire
}

is_invisable_faction = {
	OR = {
		is_infinite_faction = yes
		is_kuat_fallen_empire = yes
		is_eternal_faction = yes
	}
}

kuat_shipyard_diplo_event_active = {
	has_active_event = {
		kuat_shipyard.1
		kuat_shipyard.2
		kuat_shipyard.21
		kuat_shipyard.211
		kuat_shipyard.22
		kuat_shipyard.221
		kuat_shipyard.23
		kuat_shipyard.231
		kuat_shipyard.24
		kuat_shipyard.241
		kuat_shipyard.25
		kuat_shipyard.251
		kuat_shipyard.26
		kuat_shipyard.261
		kuat_shipyard.3
	}
}

kuat_fire_base_diplo_event_active = {
	has_active_event = {
		kuat_legacy.78
		kuat_legacy.79
		kuat_legacy.82
		kuat_legacy.80
		kuat_legacy.83
		kuat_legacy.84
		kuat_legacy.85
		kuat_legacy.86
		kuat_legacy.81
		kuat_legacy.87
		kuat_legacy.88
	}
}

kuat_support_diplo_event_active = {
	has_active_event = {
		kuat_origin.9
		kuat_origin.10
		kuat_origin.11
		kuat_origin.12
		kuat_origin.13
		kuat_origin.14
		kuat_origin.15
	}
}

eternal_support_diplo_event_active = {
	has_active_event = {
		kuat_EEstart.4
		kuat_EEstart.5
		kuat_EEstart.6
		kuat_EEstart.7
		kuat_EEstart.8
		kuat_EEstart.9
		kuat_EEstart.10
	}
}

can_communicate_with_kuat = {
	exists = event_target:fallen_empire_kuat
	event_target:fallen_empire_kuat = {
		NOT = { is_hostile = root }
		event_target:fallen_empire_kuat = { opinion = { who = root value > -1000 } }
	}
	exists = event_target:kuat_shipyard_country
	event_target:kuat_shipyard_country = { NOT = { is_hostile = root } }
}

kuat_fleet_diplo_event_active = {
	has_active_event = {
		executor_build.373
		executor_build.374
	}
}

can_communicate_with_kuat_fleet = {
	exists = event_target:fallen_empire_kuat
	event_target:fallen_empire_kuat = {
		NOT = { is_hostile = root }
		event_target:fallen_empire_kuat = { opinion = { who = root value > -1000 } }
	}
	exists = event_target:fallen_empire_kuat_fleet
}

kuat_is_defense_galaxy_fleet = {
	any_country = {
		OR = {
			is_country_type = ai_empire
			is_country_type = extradimensional
			is_country_type = extradimensional_2
			is_country_type = extradimensional_3
			is_country_type = swarm
			is_country_type = wg_crisis_country
			is_country_type = afk_crisis_country
		}
	}
}

is_kuat_battle_country = {
	OR = {
		is_country_type = ai_empire
		is_country_type = extradimensional
		is_country_type = extradimensional_2
		is_country_type = extradimensional_3
		is_country_type = swarm
		is_country_type = wg_crisis_country
		is_country_type = afk_crisis_country
	}
}

kuat_is_repair_system = {	
	OR = {
		has_star_flag = Kuat_empire_system
		AND = {
			NOT = { has_global_flag = enable_the_eternal_starbase }
			has_star_flag = eternal_starbase_megastructure_in_system
		}
	}
}

kuat_is_kuat_system = {
	OR = {
		has_star_flag = Kuat_empire_system
		has_star_flag = kuat_initial_system
	}
}

kuat_is_exe_return_invasion_system = {
	OR = {
		has_star_flag = lcluster
		has_star_flag = wg_sealed_system
		has_star_flag = ag_no_jump_in_system			
		has_star_flag = Kuat_empire_system		
		has_star_flag = outercluster					
		has_star_flag = kuat_initial_system
	}
}

kuat_is_invasion_system = {
	OR = {
		has_star_flag = ag_exe_invasion_gate_system
		has_star_flag = ag_exe_invasion_gate_system_fallback
		has_star_flag = Kuat_empire_system
	}
}

kuat_is_create_system = {
	OR = {
		has_star_flag = Kuat_empire_system
		has_star_flag = kuat_initial_system
		has_star_flag = fallen_sol_system
	}
}

kuat_is_can_pass_by_country = {
	OR = {
		AND = {
			NOT = { has_global_flag = disable_kuat_by_passed }
			has_origin = origin_eternalthrone
		}
		has_country_flag = can_pass_by
		is_invisable_faction = yes
	}
}

kuat_is_can_inpass_by_country = {
	OR = {
		is_invisable_faction = yes
		has_origin = origin_kuat_apocalyptic
		AND = {
			NOT = { has_global_flag = disable_kuat_by_passed }
			has_origin = origin_eternalthrone
		}
		has_country_flag = can_pass_inner_by
	}
}

#eternal borderment
kuat_is_event_borderment_ringworld = {
	OR = {
		kuat_is_ringworld = yes
		is_planet_class = pc_habitat
		AND = {
			has_global_flag = has_ancient_empire_mod
			OR = {
				has_modifier = "holy_planet"
				has_modifier = "ag_shattered_holy_planet"
			}
		}
	}
}

kuat_is_holy_world_planet = {
	OR = {
		has_modifier = "holy_planet"
		has_modifier = "ag_shattered_holy_planet"
	}
}

#flagship system
kuat_is_kuat_ship = {
	OR = {
		kuat_is_flagship_system_protection = yes
		is_ship_size = Venator_modifier
		is_ship_size = horrizone
		is_ship_size = Imperial_star_destroyer
		is_ship_size = high_Imperial_star_destroyer
		is_ship_size = swfo_resurgent
		is_ship_size = Aggressor
		is_ship_size = eternal_battleship
		is_ship_size = Infinite_crusier
		is_ship_size = Infinite_battleship
		is_ship_size = Infinite_Mothership
	}
}
kuat_is_flagship = {
	OR = {
		kuat_is_flagship_system_protection = yes
		is_ship_size = SWGS_EclipseII
		is_ship_size = SWGS_Lusankya
		is_ship_size = SWGS_Nemesis
		is_ship_size = Ge_Ragnarok
	}
}
kuat_is_flagship_system_protection = {
	OR = {
		is_ship_size = kuat_sector
		is_ship_size = eclipse
		is_ship_size = Annihilator
		is_ship_size = Vengeance
		is_ship_size = knigjt_hammer_executor
		is_ship_size = nebula_executor
		is_ship_size = nebula_dominance
		is_ship_size = X308_Balletor
		is_ship_size = X308_Titan
		is_ship_size = eternal_flagship
		has_ship_flag = has_ag_flagship
		has_ship_flag = has_sg_flagship
	}
}

kuat_is_ancient_ship_against = {
	if = { limit = { NOT = { has_global_flag = has_ancient_empire_mod } } always = no }
	else = { any_owned_ship = { ag_is_mod_ship = yes } }
}

kuat_is_forbidden_ee_production_var = {
	OR = { 
		has_authority = auth_starshipgirls 
		has_authority = auth_asharmdolls
		is_nirvana_empire = yes
	}
}

# kuat_is_wsg_flagship = {
# 	OR = {
# 		is_ship_size = wg_fm_flagship
# 		is_ship_size = uf_flagship_o
# 	}
# }

# kuat_is_girlfront_flagship = {
# 	OR = {
# 		is_ship_size = GFnyto_Command_ship
# 		is_ship_size = sfdoll_destroyer
# 	}
# }

# kuat_is_addon_flagship_system_protection = {
# 	any_owned_ship = {
# 		kuat_is_addon_flagship = yes
# 		has_component = SG_Empire_aura_techs
# 	}
# }

# kuat_is_addon_flagship = {
# 	OR = {
# 		is_ship_size = sg_nebula_dominance
# 		is_ship_size = sg_nebula_executor
# 		is_ship_size = sg_eclipse
# 		is_ship_size = SG_Annihilator
# 	}
# }

has_enable_ai_battle_system = {
	is_country_type = default  is_ai = yes
	has_global_flag = ai_fighting_with_player_against_eternal
}

has_enable_flag_ship_system_true = {
	any_owned_ship = { kuat_is_flagship_system_protection = yes }
}

has_enable_flag_ship_system_false = {
	any_owned_ship = { kuat_is_flagship_system_protection = no }
}

kuat_is_flagship_size = {
	any_owned_ship = { is_ship_size = $size$ }
}

kuat_has_ship_flag = {
	any_owned_ship = { has_ship_flag = $flag$ }
}

#starkiller base
kuat_is_ringworld = {
	OR = {
		is_ringworld = yes
		is_planet_class = pc_kuat_eternal_ringworld_habitable
		is_planet_class = pc_ringworld_habitable_damaged
		is_planet_class = pc_ringworld_seam_damaged
		is_planet_class = pc_ringworld_tech_damaged
		is_planet_class = pc_ringworld_shielded
		is_planet_class = pc_ringworld_habitable
		is_planet_class = pc_ringworld_tech
		is_planet_class = pc_ringworld_habitable
	}
}

kuat_is_habitat = {
	OR = {
		is_planet_class = pc_habitat
		is_planet_class = pc_flat_world
		is_planet_class = pc_squareworld_habitable
		is_planet_class = pc_interstellar_habitat
		is_planet_class = pc_mem_vazuran_habitat
		is_planet_class = pc_habitat_robot
		is_planet_class = pc_gghab
		is_planet_class = pc_tmhab
		is_planet_class = pc_tmhab2
		is_planet_class = pc_mmhab
		is_planet_class = pc_mmhab2
		is_planet_class = pc_bhab
		is_planet_class = pc_bchab
		is_planet_class = pc_mhab
		is_planet_class = pc_fhab
		is_planet_class = pc_fmhab
		is_planet_class = pc_mehab
	}
}

# is_quasi_stellar_obliterator = {
# 	OR = {
# 		is_megastructure_type = quasi_stellar_obliterator_6
# 		is_megastructure_type = quasi_stellar_obliterator_5
# 		is_megastructure_type = quasi_stellar_obliterator_4
# 		is_megastructure_type = quasi_stellar_obliterator_3
# 		is_megastructure_type = quasi_stellar_obliterator_2
# 		is_megastructure_type = quasi_stellar_obliterator_1
# 		is_megastructure_type = quasi_stellar_obliterator_0
# 		is_megastructure_type = quasi_stellar_gateway_off
# 		is_megastructure_type = quasi_stellar_gateway_on
# 		is_megastructure_type = quasi_stellar_marker_planet
# 		is_megastructure_type = quasi_stellar_marker_planet_open
# 		is_megastructure_type = quasi_stellar_marker_planet_firing
# 		is_megastructure_type = quasi_stellar_marker_cluster
# 		is_megastructure_type = quasi_stellar_marker_cluster_open
# 		is_megastructure_type = quasi_stellar_marker_cluster_firing
# 		is_megastructure_type = quasi_stellar_marker_star
# 		is_megastructure_type = quasi_stellar_marker_star_open
# 		is_megastructure_type = quasi_stellar_marker_star_firing
# 	}
# }

# is_penrose_sphere = {
# 	OR = {
# 		is_megastructure_type = penrose_sphere_0
# 		is_megastructure_type = penrose_sphere_1
# 		is_megastructure_type = penrose_sphere_2
# 		is_megastructure_type = penrose_sphere_a2
# 		is_megastructure_type = penrose_sphere_a3
# 		is_megastructure_type = penrose_sphere_a4
# 		is_megastructure_type = penrose_sphere_a41
# 		is_megastructure_type = penrose_sphere_a42
# 		is_megastructure_type = penrose_sphere_b2
# 		is_megastructure_type = penrose_sphere_b3
# 		is_megastructure_type = penrose_sphere_b4
# 		is_megastructure_type = gigablackhole_ring_world_2
# 		is_megastructure_type = gigablackhole_ring_world_3
# 	}
# }

# is_nicoll_beam = {
# 	OR = {
# 		is_megastructure_type = nicoll_beam_0
# 		is_megastructure_type = nicoll_beam_1
# 		is_megastructure_type = nicoll_beam_2
# 		is_megastructure_type = nicoll_beam_3
# 		is_megastructure_type = nicoll_beam_4
# 		is_megastructure_type = nicoll_beam_5
# 		is_megastructure_type = nicoll_beam_6
# 		is_megastructure_type = nicoll_beam_side_gate
# 		is_megastructure_type = nicoll_beam_side_gate_1
# 		is_megastructure_type = nicoll_beam_gate
# 		is_megastructure_type = nicoll_beam_gate_2
# 		is_megastructure_type = nicoll_beam_gate_1
# 		is_megastructure_type = nicoll_beam_target_marker_1
# 		is_megastructure_type = nicoll_beam_target_marker_2
# 		is_megastructure_type = nicoll_beam_target_marker_3
# 		is_megastructure_type = nicoll_beam_target_marker_4
# 		is_megastructure_type = nicoll_beam_target_marker_6
# 		is_megastructure_type = nicoll_beam_target_marker_5
# 	}
# }

# is_ehof_megastructure = {
# 	OR = {
# 		is_megastructure_type = ehof_megastructure_phase0
# 		is_megastructure_type = ehof_megastructure_phase1_idle
# 		is_megastructure_type = ehof_megastructure_phase2_idle
# 		is_megastructure_type = ehof_megastructure_phase3_idle
# 		is_megastructure_type = ehof_megastructure_phase4_idle
# 		is_megastructure_type = ehof_megastructure_phase5_idle
# 		is_megastructure_type = ehof_megastructure_ruined
# 		is_megastructure_type = ehof_megastructure_restored
# 		is_megastructure_type = ehof_megastructure_phase1_activating
# 		is_megastructure_type = ehof_megastructure_phase2_activating
# 		is_megastructure_type = ehof_megastructure_phase3_activating
# 		is_megastructure_type = ehof_megastructure_phase4_activating
# 		is_megastructure_type = ehof_megastructure_phase5_activating
# 		is_megastructure_type = ehof_megastructure_phase1_active
# 		is_megastructure_type = ehof_megastructure_phase2_active
# 		is_megastructure_type = ehof_megastructure_phase3_active
# 		is_megastructure_type = ehof_megastructure_phase4_active
# 		is_megastructure_type = ehof_megastructure_phase5_active
# 		is_megastructure_type = ehof_megastructure_phase1_decommissioned
# 		is_megastructure_type = ehof_megastructure_phase2_decommissioned
# 		is_megastructure_type = ehof_megastructure_phase4_decommissioned
# 		is_megastructure_type = ehof_megastructure_phase3_decommissioned
# 		is_megastructure_type = ehof_megastructure_phase5_decommissioned
# 		is_megastructure_type = ehof_compound_phase1
# 		is_megastructure_type = ehof_compound_phase2
# 		is_megastructure_type = ehof_compound_phase3
# 		is_megastructure_type = ehof_compound_phase4
# 	}
# }

#eternal check
retrun_first_station_check = {
	optimize_memory
	if = {
		limit = { any_country = { is_ai = no OR = {
			has_origin = origin_kuat_apocalyptic
			has_origin = origin_eternalthrone
		} } }
		if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value <= 1 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 2 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 2 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 4 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 3 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 6 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 4 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 8 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 5 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 10 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 6 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 12 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 7 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 14 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 8 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 16 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 9 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 18 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value >= 10 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 20 }
			}
		}
	}
	else = {
		event_target:global_event_country = {
			check_variable = { which = count_destroy_eternal_fleet value > 10 }
		}
	}
}

retrun_second_station_check = {
	optimize_memory
	if = {
		limit = { any_country = { is_ai = no OR = {
			has_origin = origin_kuat_apocalyptic
			has_origin = origin_eternalthrone
		} } }
		if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value <= 1 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 4 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 2 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 8 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 3 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 12 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 4 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 16 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 5 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 20 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 6 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 24 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 7 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 28 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 8 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 32 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 9 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 36 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value >= 10 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 40 }
			}
		}
	}
	else = {
		event_target:global_event_country = {
			check_variable = { which = count_destroy_eternal_fleet value > 20 }
		}
	}
}

retrun_third_station_check = {
	optimize_memory
	if = {
		limit = { any_country = { is_ai = no OR = {
			has_origin = origin_kuat_apocalyptic
			has_origin = origin_eternalthrone
		} } }
		if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value <= 1 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 8 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 2 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 16 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 3 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 24 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 4 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 32 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 5 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 40 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 6 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 48 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 7 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 56 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 8 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 64 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value = 9 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 72 }
			}
		}
		else_if = {
			limit = { event_target:global_event_country = {
				check_variable = { which = eternal_fleet_return_index value >= 10 }
			} }
			event_target:global_event_country = {
				check_variable = { which = count_destroy_eternal_fleet value > 80 }
			}
		}
	}
	else = {
		event_target:global_event_country = {
			check_variable = { which = count_destroy_eternal_fleet value > 40 }
		}
	}
}

#kuat origin
eks_init_unflaged = {
	NOR = {
		has_star_flag = etenal_kuat_system_init_style_1_flaged
		has_star_flag = etenal_kuat_system_init_style_2_flaged
		has_star_flag = etenal_kuat_system_init_style_3_flaged
		has_star_flag = etenal_kuat_system_init_style_4_flaged
	}
}

kuat_has_researcher = {
	AND = {
		planet_resource_compare = { resource = physics_research value > 0 type = produces }
		planet_resource_compare = { resource = society_research value > 0 type = produces }
		planet_resource_compare = { resource = engineering_research value > 0 type = produces }
	}
}

#eternal origin
eternal_archaeological_limit = {
	solar_system = { NOT = { has_star_flag = zakuul_system } }
	is_colonizable = no is_colony = no is_ringworld = no is_asteroid = no is_star = no
	NOT = { exists = archaeological_site }
}

#ship building trigger
has_trigger_shipyard = {
	OR = {
		AND = { is_scope_type = starbase OR = {
			has_starbase_size = ag_gamma_station_hostile
			has_starbase_size = ag_gamma_station_0
			has_starbase_size = ag_gamma_station_1
			has_starbase_size = swfo_supremacy
			has_starbase_size = exe_megastructure_starbase
			has_starbase_building = edmegashipyard_module
			owner = { has_origin = origin_kuat_apocalyptic }
		} }
		AND = { is_scope_type = megastructure OR = {
			is_megastructure_type = ag_ancient_construction_section
			has_megastructure_flag = ag_ancient_construction_section_megashipyard
			is_megastructure_type = StarForge
			is_megastructure_type = ed_mega_shipyard
			is_megastructure_type = exe_black_hole_restore
			is_megastructure_type = exe_black_hole_facility
		} }
	}
}

#archological trigger
kuat_is_legacy_arc_planet = {
	is_colony = no
	is_under_colonization = no
	is_colonizable = no
	is_asteroid = no
	is_ringworld = no
	is_star = no
	NOT = { exists = archaeological_site }
}

#bomborment country
kuat_can_do_bombarment_country = {
	OR = {
		is_country_type = kuat_fleet
		is_country_type = kuat_fleet_hostile
		is_country_type = kuat_fallen_empire				
		is_country_type = kuat_awakened_fallen_empire				
		is_country_type = awakened_return_kuat_empire				
		is_country_type = ag_kuat_invasion_country				
		is_country_type = ag_kae_ge_invasion_country
		is_country_type = Infinite_empire	
		is_country_type = kuat_plague_endoira
	}
}
#be bombarment country
kuat_can_be_orbital_bombarment_country = {
	OR = {
		is_country_type = kuat_fleet
		is_country_type = kuat_fleet_hostile
		is_country_type = awakened_return_kuat_empire	
		is_country_type = kuat_fallen_empire				
		is_country_type = kuat_awakened_fallen_empire	
		is_country_type = kuat_plague_endoira	
	}
}

kuat_num_pops = {
	OR = {
		num_pops >= $NUM$
		check_variable = { which = $WHICH$ value >= $NUM$ }
	}
}

#scope: country
kuat_has_swgs_tech = {
	has_authority = auth_starshipgirls
	[[TECH] has_technology = $TECH$ ]
	[[TRAT] has_trait = $TRAT$ ]
	[[CIVC] has_civic = $CIVC$ ]
	[[EMPO] is_galactic_emperor = $EMPO$ ]
}

has_kuat_support_modifier_star_flag = {
	NOT = { has_star_flag = kuat_military_base_system_home }
	OR = {
		has_star_flag = kuat_starbase_megastructure_around_system
		has_star_flag = kuat_starbase_megastructure_conbine_system
	}
}